type Query {
  accounting: Accounting
  ats: Ats
  crm: Crm
  customerSupport: CustomerSupport
  fileStorage: FileStorage
  hris: Hris
  lead: Lead
  sms: Sms
  vault: Vault
}

type Mutation {
  accounting: MutationAccounting
  crm: MutationCrm
  customerSupport: MutationCustomerSupport
  fileStorage: MutationFileStorage
  hris: MutationHris
  lead: MutationLead
  sms: MutationSms
  vault: MutationVault
}

type Accounting {
  """
  List Payments
  """
  Payments(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): PaymentList
  """
  Get company info
  """
  companyInfo(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CompanyInfo
  """
  Get Customer
  """
  customer(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Customer
  """
  List Customers
  """
  customers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerList
  """
  Get Invoice
  """
  invoice(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Invoice
  """
  Get Invoice Item
  """
  invoiceItem(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceItem
  """
  List Invoice Items
  """
  invoiceItems(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceItemList
  """
  List Invoices
  """
  invoices(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceList
  """
  Get Ledger Account
  """
  ledgerAccount(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccount
  """
  List Ledger Accounts
  """
  ledgerAccounts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccountList
  """
  Get Payment
  """
  payment(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Payment
  """
  Get Tax Rate
  """
  taxRate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRate
  """
  List Tax Rates
  """
  taxRates(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRateList
}

type PaymentList {
  data: [Payment]!
  """
  Response metadata
  """
  meta: Meta
}

type Payment {
  """
  Unique identifier for the account to allocate payment to.
  """
  accountsReceivableAccountId: String!
  """
  Type of accounts receivable account.
  """
  accountsReceivableAccountType: String
  allocations: [AllocationsListItem]
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Exchange rate when payment is received
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: AccountingLinkedCustomer
  """
  Unique identifier representing the entity
  """
  id: String
  """
  Optional payment reference message ie: Debit remittance detail.
  """
  reference: String
  """
  Amount of payment
  """
  totalAmount: Float!
  """
  Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
  """
  transactionDate: String!
}

type AllocationsListItem {
  """
  Amount of payment that should be attributed to this allocation
  """
  amount: Float
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  type: Type
}

enum Type {
  text
  checkbox
  tel
  email
  url
  textarea
  select
  filteredselect
  multiselect
  datetime
  date
  time
  number
  sms
  mms
  customer
  supplier
  employee
  personal
  invoice
  order
}

enum Currency {
  UNKNOWN_CURRENCY
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRC
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  USS
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XTS
  XXX
  YER
  ZAR
  ZMK
  ZMW
  BTC
}

"""
The customer this entity is linked to.
"""
type AccountingLinkedCustomer {
  companyName: String
  displayId: String
  id: String!
}

"""
Response metadata
"""
type Meta {
  """
  Cursors to navigate to previous or next pages through the API
  """
  cursors: Cursors
  """
  Number of items returned in the data property of the response
  """
  itemsOnPage: Int
}

"""
Cursors to navigate to previous or next pages through the API
"""
type Cursors {
  """
  Cursor to navigate to the current page of results through the API
  """
  current: String
  """
  Cursor to navigate to the next page of results through the API
  """
  next: String
  """
  Cursor to navigate to the previous page of results through the API
  """
  previous: String
}

type CompanyInfo {
  addresses: [Address]
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  emails: [Email]
  id: String
  phoneNumbers: [PhoneNumber]
  salesTaxNumber: String
  updatedAt: String
  updatedBy: String
}

type Address {
  """
  Name of city.
  """
  city: String
  contactName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  """
  Address field that holds a sublocality, such as a county
  """
  county: String
  email: String
  fax: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  longitude: String
  name: String
  phoneNumber: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  salutation: String
  """
  Name of state
  """
  state: String
  """
  Street number
  """
  streetNumber: String
  string: String
  type: AddressType
  website: String
}

enum AddressType {
  primary
  secondary
  home
  office
  shipping
  billing
  other
}

type Email {
  email: String!
  id: String
  type: EmailType
}

enum EmailType {
  primary
  secondary
  work
  personal
  billing
  other
}

type PhoneNumber {
  areaCode: String
  countryCode: String
  id: String
  number: String!
  type: PhoneType
}

enum PhoneType {
  primary
  secondary
  home
  office
  mobile
  assistant
  fax
  directdialin
  personal
  other
}

type Customer {
  addresses: [Address]
  bankAccounts: BankAccount
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayId: String
  emails: [Email]
  firstName: String
  id: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumber]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
  taxRate: LinkedTaxRate
  updatedAt: String
  updatedBy: String
}

type BankAccount {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  The type of bank account.
  """
  accountType: AccountType
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  iban: String
}

enum AccountType {
  bank_account
  credit_card
  other
}

enum CustomerStatus {
  active
  archived
  gdprerasurerequest
  unknown
}

type LinkedTaxRate {
  code: String
  id: String!
}

type CustomerList {
  data: [Customer]!
  """
  Response metadata
  """
  meta: Meta
}

type Invoice {
  balance: Float
  billingAddress: Address
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The customer this entity is linked to.
  """
  customer: AccountingLinkedCustomer
  customerMemo: String
  deposit: Float
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD
  """
  dueDate: String
  id: String
  """
  Date invoice was issued - YYYY-MM-DD
  """
  invoiceDate: String
  lineItems: [InvoiceLineItem]
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  rowVersion: String
  shippingAddress: Address
  """
  Invoice status
  """
  status: Status
  subTotal: Float
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  total: Float
  totalTax: Float
  type: InvoiceType
  updatedAt: String
  updatedBy: String
}

type InvoiceLineItem {
  """
  User defined item code
  """
  code: String
  description: String
  discountPercentage: Float
  id: String
  item: LinkedInvoiceItem
  ledgerAccount: LinkedLedgerAccount
  lineNumber: Int
  quantity: Int
  rowId: String
  rowVersion: String
  taxAmount: Float
  taxRate: LinkedTaxRate
  totalAmount: Float
  type: InvoiceLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type LinkedInvoiceItem {
  """
  User defined item code
  """
  code: String
  """
  ID of the linked item
  """
  id: String
  name: String
}

type LinkedLedgerAccount {
  id: String!
  name: String
}

enum InvoiceLineItemType {
  inventory
  service
}

enum Status {
  live
  upcoming
  requested
  accepted
  scheduled
  canceled
  queued
  sending
  sent
  failed
  delivered
  undelivered
  receiving
  received
  read
  tentative
  declined
  draft
  submitted
  partially_paid
  paid
  void
  credit
}

enum InvoiceType {
  standard
  credit
  service
  product
  other
}

type InvoiceItem {
  active: Boolean
  assetAccount: LinkedLedgerAccount
  """
  User defined item code
  """
  code: String
  createdAt: String
  createdBy: String
  description: String
  expenseAccount: LinkedLedgerAccount
  id: String
  incomeAccount: LinkedLedgerAccount
  name: String
  purchaseDetails: PurchaseDetails
  """
  Item is available for purchase transactions
  """
  purchased: Boolean
  quantity: Int
  rowVersion: String
  salesDetails: SalesDetails
  """
  Item will be available on sales transactions
  """
  sold: Boolean
  """
  Item is inventoried
  """
  tracked: Boolean
  type: InvoiceItemType
  unitPrice: Float
  updatedAt: String
  updatedBy: String
}

type PurchaseDetails {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRate
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type SalesDetails {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRate
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

enum InvoiceItemType {
  inventory
  service
}

type InvoiceItemList {
  data: [InvoiceItem]!
  """
  Response metadata
  """
  meta: Meta
}

type InvoiceList {
  data: [Invoice]!
  """
  Response metadata
  """
  meta: Meta
}

type LedgerAccount {
  active: Boolean
  bankAccount: BankAccount
  classification: Classification
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  currentBalance: Float
  description: String
  displayId: String
  fullyQualifiedName: String
  header: Boolean
  id: String
  """
  Reconciliation Date means the last calendar day of each Reconciliation Period.
  """
  lastReconciliationDate: String
  level: Float
  name: String
  nominalCode: String
  openingBalance: Float
  parentAccount: ParentAccount
  rowVersion: String
  status: LedgerAccountStatus
  subAccount: Boolean
  subAccounts: [SubAccountsListItem]
  subType: String
  taxRate: LinkedTaxRate
  taxType: String
  type: LedgerAccountType
  updatedAt: String
  updatedBy: String
}

enum Classification {
  asset
  equity
  expense
  liability
  revenue
  income
  other_income
  other_expense
  costs_of_sales
}

type ParentAccount {
  displayId: String
  id: String
  name: String
}

enum LedgerAccountStatus {
  active
  inactive
  archived
}

type SubAccountsListItem {
  accountSubName: String
  id: String
}

enum LedgerAccountType {
  accounts_receivable
  revenue
  bank
  current_asset
  fixed_asset
  non_current_asset
  other_asset
  equity
  expense
  other_expense
  costs_of_sales
  accounts_payable
  credit_card
  current_liability
  non_current_liability
  other_liability
}

type LedgerAccountList {
  data: [LedgerAccount]!
  """
  Response metadata
  """
  meta: Meta
}

type TaxRate {
  code: String
  components: [ComponentsListItem]
  createdAt: String
  createdBy: String
  description: String
  effectiveTaxRate: Float
  id: String
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  rowVersion: String
  status: TaxRateStatus
  """
  Unique identifier for the account for tax collected.
  """
  taxPayableAccountId: String
  """
  Unique identifier for the account for tax remitted.
  """
  taxRemittedAccountId: String
  """
  Tax type used to define the source of tax collected or paid
  """
  taxType: TaxType
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
  """
  Tax type used to indicate the source of tax collected or paid
  """
  type: String
  updatedAt: String
  updatedBy: String
}

type ComponentsListItem {
  compound: Boolean
  name: String
  rate: Float
}

enum TaxRateStatus {
  active
  inactive
  archived
}

enum TaxType {
  output
  input
  withholdings
  import_gst
  output_gst
  input_exempt
  output_exempt
  consolidated
  luxury_car_tax
  none
}

type TaxRateList {
  data: [TaxRate]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationAccounting {
  """
  Create Customer
  """
  customersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerInput!
  ): UnifiedId
  """
  Delete Customer
  """
  customersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Customer
  """
  customersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerInput!
  ): UnifiedId
  """
  Create Invoice Item
  """
  invoiceItemsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceItemInput!
  ): UnifiedId
  """
  Delete Invoice Item
  """
  invoiceItemsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Invoice Item
  """
  invoiceItemsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceItemInput!
  ): UnifiedId
  """
  Create Invoice
  """
  invoicesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): InvoiceResponse
  """
  Delete Invoice
  """
  invoicesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceResponse
  """
  Update Invoice
  """
  invoicesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): InvoiceResponse
  """
  Create Ledger Account
  """
  ledgerAccountsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Delete Ledger Account
  """
  ledgerAccountsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Ledger Account
  """
  ledgerAccountsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Create Payment
  """
  paymentsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PaymentInput!
  ): UnifiedId
  """
  Delete Payment
  """
  paymentsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Payment
  """
  paymentsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PaymentInput!
  ): UnifiedId
  """
  Create Tax Rate
  """
  taxRatesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
  """
  Delete Tax Rate
  """
  taxRatesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Tax Rate
  """
  taxRatesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
}

type UnifiedId {
  id: String!
}

input CustomerInput {
  addresses: [AddressInput]
  bankAccounts: BankAccountInput
  companyName: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayId: String
  emails: [EmailInput]
  firstName: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumberInput]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
  taxRate: LinkedTaxRateInput
}

input AddressInput {
  """
  Name of city.
  """
  city: String
  contactName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  """
  Address field that holds a sublocality, such as a county
  """
  county: String
  email: String
  fax: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  longitude: String
  name: String
  phoneNumber: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  salutation: String
  """
  Name of state
  """
  state: String
  """
  Street number
  """
  streetNumber: String
  string: String
  type: AddressType
  website: String
}

input BankAccountInput {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  The type of bank account.
  """
  accountType: AccountType
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  iban: String
}

input EmailInput {
  email: String!
  id: String
  type: EmailType
}

input PhoneNumberInput {
  areaCode: String
  countryCode: String
  id: String
  number: String!
  type: PhoneType
}

input LinkedTaxRateInput {
  id: String!
}

input InvoiceItemInput {
  active: Boolean
  assetAccount: LinkedLedgerAccountInput
  """
  User defined item code
  """
  code: String
  description: String
  expenseAccount: LinkedLedgerAccountInput
  incomeAccount: LinkedLedgerAccountInput
  name: String
  purchaseDetails: PurchaseDetailsInput
  """
  Item is available for purchase transactions
  """
  purchased: Boolean
  quantity: Int
  rowVersion: String
  salesDetails: SalesDetailsInput
  """
  Item will be available on sales transactions
  """
  sold: Boolean
  """
  Item is inventoried
  """
  tracked: Boolean
  type: InvoiceItemType
  unitPrice: Float
}

input LinkedLedgerAccountInput {
  id: String!
}

input PurchaseDetailsInput {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRateInput
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

input SalesDetailsInput {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRateInput
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type InvoiceResponse {
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  id: String
}

input InvoiceInput {
  balance: Float
  billingAddress: AddressInput
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The customer this entity is linked to.
  """
  customer: AccountingLinkedCustomerInput
  customerMemo: String
  deposit: Float
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD
  """
  dueDate: String
  """
  Date invoice was issued - YYYY-MM-DD
  """
  invoiceDate: String
  lineItems: [InvoiceLineItemInput]
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  rowVersion: String
  shippingAddress: AddressInput
  """
  Invoice status
  """
  status: Status
  subTotal: Float
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  total: Float
  totalTax: Float
  type: InvoiceType
}

"""
The customer this entity is linked to.
"""
input AccountingLinkedCustomerInput {
  id: String!
}

input InvoiceLineItemInput {
  """
  User defined item code
  """
  code: String
  description: String
  discountPercentage: Float
  item: LinkedInvoiceItemInput
  ledgerAccount: LinkedLedgerAccountInput
  lineNumber: Int
  quantity: Int
  rowId: String
  rowVersion: String
  taxAmount: Float
  taxRate: LinkedTaxRateInput
  totalAmount: Float
  type: InvoiceLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

input LinkedInvoiceItemInput {
  """
  ID of the linked item
  """
  id: String
}

input LedgerAccountInput {
  active: Boolean
  bankAccount: BankAccountInput
  classification: Classification
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  currentBalance: Float
  description: String
  displayId: String
  fullyQualifiedName: String
  header: Boolean
  """
  Reconciliation Date means the last calendar day of each Reconciliation Period.
  """
  lastReconciliationDate: String
  level: Float
  name: String
  nominalCode: String
  openingBalance: Float
  parentAccount: ParentAccountInput
  rowVersion: String
  status: LedgerAccountStatus
  subAccount: Boolean
  subType: String
  taxRate: LinkedTaxRateInput
  taxType: String
  type: LedgerAccountType
}

input ParentAccountInput {
  displayId: String
  id: String
  name: String
}

input PaymentInput {
  """
  Unique identifier for the account to allocate payment to.
  """
  accountsReceivableAccountId: String!
  """
  Type of accounts receivable account.
  """
  accountsReceivableAccountType: String
  allocations: [AllocationsListItemInput]
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Exchange rate when payment is received
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: AccountingLinkedCustomerInput
  """
  Optional payment reference message ie: Debit remittance detail.
  """
  reference: String
  """
  Amount of payment
  """
  totalAmount: Float!
  """
  Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
  """
  transactionDate: String!
}

input AllocationsListItemInput {
  """
  Amount of payment that should be attributed to this allocation
  """
  amount: Float
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  type: Type
}

input TaxRateInput {
  code: String
  components: [ComponentsListItemInput]
  description: String
  effectiveTaxRate: Float
  id: String
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  rowVersion: String
  status: TaxRateStatus
  """
  Unique identifier for the account for tax collected.
  """
  taxPayableAccountId: String
  """
  Unique identifier for the account for tax remitted.
  """
  taxRemittedAccountId: String
  """
  Tax type used to define the source of tax collected or paid
  """
  taxType: TaxType
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
  """
  Tax type used to indicate the source of tax collected or paid
  """
  type: String
}

input ComponentsListItemInput {
  compound: Boolean
  name: String
  rate: Float
}

type Ats {
  """
  Get applicant
  """
  applicant(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Applicant
  """
  List applicants
  """
  applicants(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: JobsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ApplicantList
  """
  Get job
  """
  job(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Job
  """
  List jobs
  """
  jobs(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): JobList
}

type Applicant {
  createdAt: String
  emails: [Email]
  firstName: String
  id: String
  lastName: String
  """
  The name of an applicant.
  """
  name: String
  phoneNumbers: [PhoneNumber]
  """
  The PositionId the applicant applied for.
  """
  positionId: String
}

type ApplicantList {
  data: [Applicant]!
  """
  Response metadata
  """
  meta: Meta
}

input JobsFilterInput {
  """
  Id of the job to filter on
  """
  jobId: String
}

type Job {
  """
  The code of the job.
  """
  code: String
  createdAt: String
  description: String
  id: String
  """
  The status of the job.
  """
  status: JobStatus
  title: String
  """
  The url pointing to the job.
  """
  url: String
}

enum JobStatus {
  draft
  internal
  published
  completed
}

type JobList {
  data: [Job]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationAts {
  """
  Create applicant
  """
  applicantsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ApplicantInput!
  ): UnifiedId
}

input ApplicantInput {
  emails: [EmailInput]
  firstName: String
  lastName: String
  """
  The name of an applicant.
  """
  name: String
  phoneNumbers: [PhoneNumberInput]
  """
  The PositionId the applicant applied for.
  """
  positionId: String
}

type Crm {
  """
  List activities
  """
  activities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ActivityList
  """
  Get activity
  """
  activity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Activity
  """
  List companies
  """
  companies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: CompaniesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: CompaniesSortInput
  ): CompanyList
  """
  Get company
  """
  company(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Company
  """
  Get contact
  """
  contact(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Contact
  """
  List contacts
  """
  contacts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: ContactsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: ContactsSortInput
  ): ContactList
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: LeadsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: LeadsSortInput
  ): LeadList
  """
  Get note
  """
  note(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Note
  """
  List notes
  """
  notes(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): NoteList
  """
  List opportunities
  """
  opportunities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: OpportunitiesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: OpportunitiesSortInput
  ): OpportunityList
  """
  Get opportunity
  """
  opportunity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Opportunity
  """
  Get pipeline
  """
  pipeline(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Pipeline
  """
  List pipelines
  """
  pipelines(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): PipelinesList
  """
  Get user
  """
  user(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): User
  """
  List users
  """
  users(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UserList
}

type ActivityList {
  data: [Activity]!
  """
  Response metadata
  """
  meta: Meta
}

type Activity {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  attendees: [ActivityAttendee]
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  createdAt: String
  createdBy: String
  customFields: [CustomField]
  customObjectId: String
  deleted: Boolean
  description: String
  """
  Whether the Activity is done or not
  """
  done: Boolean
  durationMinutes: Int
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  id: String
  leadId: String
  location: String
  locationAddress: Address
  note: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: ActivityType!
  updatedAt: String
  updatedBy: String
  userId: String
  videoConferenceId: String
  videoConferenceUrl: String
}

type ActivityAttendee {
  contactId: String
  createdAt: String
  emailAddress: String
  firstName: String
  id: String
  isOrganizer: Boolean
  lastName: String
  middleName: String
  name: String
  prefix: String
  status: Status
  suffix: String
  updatedAt: String
  userId: String
}

type CustomField {
  """
  More information about the custom field
  """
  description: String
  id: String!
  """
  Name of the custom field.
  """
  name: String
  value: JSON
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ShowAs {
  free
  busy
}

enum ActivityType {
  call
  meeting
  email
  note
  task
  deadline
  sendletter
  sendquote
  other
}

type CompanyList {
  data: [Company]!
  """
  Response metadata
  """
  meta: Meta
}

type Company {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [Address]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccount]
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  deleted: Boolean
  description: String
  emails: [Email]
  fax: String
  id: String
  image: String
  """
  Industry
  """
  industry: String
  interactionCount: Int
  lastActivityAt: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  """
  Parent ID
  """
  parentId: String
  payeeNumber: String
  phoneNumbers: [PhoneNumber]
  readOnly: Boolean
  salesTaxNumber: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  updatedAt: String
  updatedBy: String
  """
  VAT number
  """
  vatNumber: String
  websites: [Website]
}

type SocialLink {
  id: String
  type: String
  url: String!
}

type Website {
  id: String
  type: WebsiteType
  url: String!
}

enum WebsiteType {
  primary
  secondary
  work
  personal
  other
}

input CompaniesFilterInput {
  """
  Name of the company to filter on
  """
  name: String
}

input CompaniesSortInput {
  """
  The field on which to sort the Companies
  """
  by: CompaniesSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum CompaniesSortBy {
  created_at
  updated_at
  name
}

enum SortDirection {
  asc
  desc
}

type Contact {
  active: Boolean
  addresses: [Address]
  birthday: String
  companyId: String
  companyName: String
  createdAt: String
  currentBalance: Float
  customFields: [CustomField]
  department: String
  description: String
  emails: [Email]
  fax: String
  firstCallAt: String
  firstEmailAt: String
  firstName: String
  gender: Gender
  id: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastActivityAt: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  prefix: String
  socialLinks: [SocialLink]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  updatedAt: String
  websites: [Website]
}

enum Gender {
  male
  female
  unisex
  other
}

type ContactList {
  data: [Contact]!
  """
  Response metadata
  """
  meta: Meta
}

input ContactsFilterInput {
  """
  E-mail of the contact to filter on
  """
  email: String
  """
  First name of the contact to filter on
  """
  firstName: String
  """
  Last name of the contact to filter on
  """
  lastName: String
  """
  Name of the contact to filter on
  """
  name: String
}

input ContactsSortInput {
  """
  The field on which to sort the Contacts
  """
  by: ContactsSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum ContactsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

type Lead {
  addresses: [Address]
  companyId: String
  companyName: String!
  contactId: String
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  description: String
  emails: [Email]
  fax: String
  firstName: String
  id: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  prefix: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  title: String
  updatedAt: String
  websites: [Website]
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: LeadsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: LeadsSortInput
  ): LeadList
}

type LeadList {
  data: [Lead]!
  """
  Response metadata
  """
  meta: Meta
}

input LeadsFilterInput {
  """
  E-mail of the lead to filter on
  """
  email: String
  """
  First name of the lead to filter on
  """
  firstName: String
  """
  Last name of the lead to filter on
  """
  lastName: String
  """
  Name of the lead to filter on
  """
  name: String
}

input LeadsSortInput {
  """
  The field on which to sort the Leads
  """
  by: LeadsSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum LeadsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

type Note {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  createdAt: String
  createdBy: String
  id: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
  updatedAt: String
  updatedBy: String
}

type NoteList {
  data: [Note]!
  """
  Response metadata
  """
  meta: Meta
}

type OpportunityList {
  data: [Opportunity]!
  """
  Response metadata
  """
  meta: Meta
}

type Opportunity {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  dateLastContacted: String
  dateLeadCreated: String
  dateStageChanged: String
  deleted: Boolean
  description: String
  """
  Expected Revenue
  """
  expectedRevenue: Float
  id: String
  interactionCount: Float
  lastActivityAt: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  updatedAt: String
  updatedBy: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input OpportunitiesFilterInput {
  """
  Monetary amount to filter on
  """
  monetaryAmount: Float
  """
  Status to filter on
  """
  status: String
  """
  Title of the opportunity to filter on
  """
  title: String
  """
  Win probability to filter on
  """
  winProbability: Float
}

input OpportunitiesSortInput {
  """
  The field on which to sort the Opportunities
  """
  by: OpportunitiesSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum OpportunitiesSortBy {
  created_at
  updated_at
  title
  win_probability
  monetary_amount
  status
}

type Pipeline {
  archived: Boolean
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItem]
  updatedAt: String
}

type StagesListItem {
  displayOrder: Int
  id: String
  name: String
  value: String
}

type PipelinesList {
  data: [Pipeline]!
  """
  Response metadata
  """
  meta: Meta
}

type User {
  addresses: [Address]
  companyName: String
  createdAt: String
  """
  The department the user is currently in.
  """
  department: String
  description: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [Email]!
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  firstName: String
  id: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  parentId: String
  phoneNumbers: [PhoneNumber]
  status: String
  title: String
  updatedAt: String
  username: String
}

type UserList {
  data: [User]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationCrm {
  """
  Create activity
  """
  activitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Delete activity
  """
  activitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update activity
  """
  activitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Create company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Delete company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Create contact
  """
  contactsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Delete contact
  """
  contactsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update contact
  """
  contactsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Create note
  """
  notesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Delete note
  """
  notesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update note
  """
  notesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Create opportunity
  """
  opportunitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Delete opportunity
  """
  opportunitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update opportunity
  """
  opportunitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Create pipeline
  """
  pipelinesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Delete pipeline
  """
  pipelinesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update pipeline
  """
  pipelinesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Create user
  """
  usersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
  """
  Delete user
  """
  usersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update user
  """
  usersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
}

input ActivityInput {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  attendees: [ActivityAttendeeInput]
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  customFields: [CustomFieldInput]
  customObjectId: String
  deleted: Boolean
  description: String
  """
  Whether the Activity is done or not
  """
  done: Boolean
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  leadId: String
  location: String
  locationAddress: AddressInput
  note: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: ActivityType!
  userId: String
  videoConferenceId: String
  videoConferenceUrl: String
}

input ActivityAttendeeInput {
  emailAddress: String
  firstName: String
  isOrganizer: Boolean
  lastName: String
  middleName: String
  name: String
  prefix: String
  status: Status
  suffix: String
}

input CustomFieldInput {
  """
  More information about the custom field
  """
  description: String
  id: String!
  """
  Name of the custom field.
  """
  name: String
  value: JSON
}

input CompanyInput {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [AddressInput]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccountInput]
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  image: String
  """
  Industry
  """
  industry: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  payeeNumber: String
  phoneNumbers: [PhoneNumberInput]
  readOnly: Boolean
  salesTaxNumber: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  """
  VAT number
  """
  vatNumber: String
  websites: [WebsiteInput]
}

input SocialLinkInput {
  id: String
  type: String
  url: String!
}

input WebsiteInput {
  id: String
  type: WebsiteType
  url: String!
}

input ContactInput {
  active: Boolean
  addresses: [AddressInput]
  birthday: String
  companyId: String
  companyName: String
  currentBalance: Float
  customFields: [CustomFieldInput]
  department: String
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  gender: Gender
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  websites: [WebsiteInput]
}

input LeadInput {
  addresses: [AddressInput]
  companyId: String
  companyName: String!
  contactId: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  title: String
  websites: [WebsiteInput]
}

input NoteInput {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
}

input OpportunityInput {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input PipelineInput {
  archived: Boolean
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItemInput]
}

input StagesListItemInput {
  displayOrder: Int
  name: String
  value: String
}

input UserInput {
  addresses: [AddressInput]
  companyName: String
  """
  The department the user is currently in.
  """
  department: String
  description: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [EmailInput]!
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  firstName: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  parentId: String
  password: String
  phoneNumbers: [PhoneNumberInput]
  status: String
  title: String
  username: String
}

type CustomerSupport {
  """
  Get Customer Support Customer
  """
  customerSupportCustomer(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerSupportCustomer
  """
  List Customer Support Customers
  """
  customerSupportCustomers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerSupportCustomerList
}

type CustomerSupportCustomer {
  addresses: [Address]
  bankAccounts: BankAccount
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  emails: [Email]
  firstName: String
  id: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumber]
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
  updatedAt: String
  updatedBy: String
}

type CustomerSupportCustomerList {
  data: [CustomerSupportCustomer]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationCustomerSupport {
  """
  Create Customer Support Customer
  """
  customersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerSupportCustomerInput!
  ): UnifiedId
  """
  Delete Customer Support Customer
  """
  customersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Customer Support Customer
  """
  customersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerSupportCustomerInput!
  ): UnifiedId
}

input CustomerSupportCustomerInput {
  addresses: [AddressInput]
  bankAccounts: BankAccountInput
  companyName: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  emails: [EmailInput]
  firstName: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumberInput]
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
}

type FileStorage {
  """
  Get File
  """
  file(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): File
  """
  List Files
  """
  files(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: FilesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: FilesSortInput
  ): FileList
  """
  Get Folder
  """
  folder(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Folder
}

type File {
  createdAt: String
  createdBy: String
  """
  Optional description of the file
  """
  description: String
  """
  Whether the current user can download this file
  """
  downloadable: Boolean
  id: String!
  """
  The MIME type of the file.
  """
  mimeType: String
  """
  The name of the file
  """
  name: String!
  owner: Owner
  """
  The parent folders of the file, starting from the root
  """
  parentFolders: [LinkedFolder]
  """
  Whether the list of parent folder is complete. Some connectors only return the direct parent of a file
  """
  parentFoldersComplete: Boolean
  """
  The full path of the file or folder (includes the file name)
  """
  path: String
  """
  The size of the file in bytes
  """
  size: Int
  """
  The type of resource. Could be file, folder or url
  """
  type: FileType!
  updatedAt: String
  updatedBy: String
}

type Owner {
  """
  Email of the owner
  """
  email: String
  """
  ID of the owner
  """
  id: String
  """
  Name of the owner
  """
  name: String
}

type LinkedFolder {
  id: String!
  """
  The name of the folder
  """
  name: String
}

enum FileType {
  file
  folder
  url
}

type FileList {
  data: [File]!
  """
  Response metadata
  """
  meta: Meta
}

input FilesFilterInput {
  """
  ID of the folder to filter on. The root folder has an alias "root"
  """
  folderId: String
  """
  Only return files and folders that are shared
  """
  shared: Boolean
}

input FilesSortInput {
  """
  The field on which to sort the Files
  """
  by: FilesSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum FilesSortBy {
  updated_at
  name
}

type Folder {
  createdAt: String
  createdBy: String
  """
  Optional description of the folder
  """
  description: String
  id: String
  """
  The name of the folder
  """
  name: String!
  owner: Owner
  """
  The parent folders of the file, starting from the root
  """
  parentFolders: [LinkedFolder]!
  """
  Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
  """
  parentFoldersComplete: Boolean
  """
  The full path of the folder (includes the folder name)
  """
  path: String
  """
  The size of the folder in bytes
  """
  size: Int
  updatedAt: String
  updatedBy: String
}

type MutationFileStorage {
  """
  Delete File
  """
  filesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Search Files
  """
  filesSearch(requestBody: FilesSearchInput!): FileList
  """
  Upload file
  """
  filesUpload(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    String represents payload of content type '*/*'
    """
    requestBody: String
  ): UnifiedId
  """
  Create Folder
  """
  foldersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CreateFolderRequestInput!
  ): UnifiedId
  """
  Delete Folder
  """
  foldersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Rename or move Folder
  """
  foldersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UpdateFolderRequestInput!
  ): UnifiedId
}

input FilesSearchInput {
  """
  The query to search for. May match across multiple fields.
  """
  query: String!
}

input CreateFolderRequestInput {
  """
  Optional description of the folder.
  """
  description: String
  """
  The name of the folder.
  """
  name: String!
  """
  The parent folder to create the new folder within.
  """
  parentFolderId: String!
}

input UpdateFolderRequestInput {
  """
  Optional description of the folder.
  """
  description: String
  """
  The name of the folder.
  """
  name: String
  """
  The parent folder to create the new folder within.
  """
  parentFolderId: String
}

type Hris {
  """
  Get Employee
  """
  employee(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Employee
  """
  List Employees
  """
  employees(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): EmployeeList
  """
  List Companies
  """
  hrisCompanies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisCompanyList
  """
  Get Company
  """
  hrisCompany(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisCompany
}

type Employee {
  addresses: [Address]
  birthday: String
  companyId: String
  companyName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  countryOfBirth: String
  createdAt: String
  createdBy: String
  customFields: [CustomField]
  """
  The department the user is currently in.
  """
  department: String
  description: String
  displayName: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [Email]
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  """
  A Start Date is the date that the employee ended working at the company
  """
  employmentEndDate: String
  """
  A Start Date is the date that the employee started working at the company
  """
  employmentStartDate: String
  employmentStatus: EmploymentStatus
  firstName: String
  gender: Gender
  id: String
  initials: String
  jobs: [JobsListItem]
  languages: [String]
  lastName: String
  managerId: String
  maritalStatus: String
  middleName: String
  nationalities: [String]
  phoneNumbers: [PhoneNumber]
  """
  The URL pointing to a picture.
  """
  pictureUrl: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  preferedLanguage: String
  prefferedName: String
  salutation: String
  socialSecurityNumber: String
  """
  The team the user is currently in.
  """
  team: Team
  title: String
  updatedAt: String
  updatedBy: String
}

enum EmploymentStatus {
  active
  inactive
  other
}

type JobsListItem {
  compensationRate: String
  compensations: [CompensationsListItem]
  employeeId: String
  hiredAt: String
  id: String
  """
  Indicates whether this the employee's primary job
  """
  isPrimary: Boolean
  location: Address
  paymentUnit: PaymentUnit
  title: String
}

type CompensationsListItem {
  """
  The effective date for this compensation.
  """
  effectiveDate: String
  """
  The FLSA status for this compensation.
  """
  flsaStatus: FlsaStatus
  id: String
  """
  The ID of the job to which the compensation belongs.
  """
  jobId: String
  paymentUnit: PaymentUnit
  """
  The amount paid per payment unit.
  """
  rate: String
}

enum FlsaStatus {
  exempt
  salariednonexempt
  nonexempt
  owner
}

enum PaymentUnit {
  hour
  week
  month
  year
  paycheck
}

"""
The team the user is currently in.
"""
type Team {
  id: String
  name: String
}

type EmployeeList {
  data: [Employee]!
  """
  Response metadata
  """
  meta: Meta
}

type HrisCompanyList {
  data: [HrisCompany]!
  """
  Response metadata
  """
  meta: Meta
}

type HrisCompany {
  createdAt: String
  createdBy: String
  debtorId: String
  deleted: Boolean
  displayName: String
  id: String
  legalName: String
  updatedAt: String
  updatedBy: String
}

type MutationHris {
  """
  Create Company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: HrisCompanyInput!
  ): UnifiedId
  """
  Delete Company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: HrisCompanyInput!
  ): UnifiedId
  """
  Create Employee
  """
  employeesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: EmployeeInput!
  ): UnifiedId
  """
  Delete Employee
  """
  employeesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Employee
  """
  employeesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: EmployeeInput!
  ): UnifiedId
}

input HrisCompanyInput {
  debtorId: String
  displayName: String
  legalName: String
}

input EmployeeInput {
  addresses: [AddressInput]
  birthday: String
  companyId: String
  companyName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  countryOfBirth: String
  customFields: [CustomFieldInput]
  """
  The department the user is currently in.
  """
  department: String
  description: String
  displayName: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [EmailInput]
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  """
  A Start Date is the date that the employee ended working at the company
  """
  employmentEndDate: String
  """
  A Start Date is the date that the employee started working at the company
  """
  employmentStartDate: String
  employmentStatus: EmploymentStatus
  firstName: String
  gender: Gender
  initials: String
  jobs: [JobsListItemInput]
  languages: [String]
  lastName: String
  managerId: String
  maritalStatus: String
  middleName: String
  nationalities: [String]
  phoneNumbers: [PhoneNumberInput]
  """
  The URL pointing to a picture.
  """
  pictureUrl: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  preferedLanguage: String
  prefferedName: String
  salutation: String
  socialSecurityNumber: String
  """
  The team the user is currently in.
  """
  team: TeamInput
  title: String
}

input JobsListItemInput {
  compensationRate: String
  compensations: [CompensationsListItemInput]
  hiredAt: String
  """
  Indicates whether this the employee's primary job
  """
  isPrimary: Boolean
  location: AddressInput
  paymentUnit: PaymentUnit
  title: String
}

input CompensationsListItemInput {
  """
  The effective date for this compensation.
  """
  effectiveDate: String
  """
  The FLSA status for this compensation.
  """
  flsaStatus: FlsaStatus
  paymentUnit: PaymentUnit
  """
  The amount paid per payment unit.
  """
  rate: String
}

"""
The team the user is currently in.
"""
input TeamInput {
  id: String
  name: String
}

type MutationLead {
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
}

type Sms {
  """
  Get Message
  """
  message(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Message
  """
  List Messages
  """
  messages(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): MessageList
}

type Message {
  """
  The message text.
  """
  body: String!
  createdAt: String
  createdBy: String
  """
  The direction of the message.
  """
  direction: Direction
  """
  The error returned if your message status is failed or undelivered.
  """
  error: Error
  """
  The phone number that initiated the message.
  """
  from: String!
  id: String
  """
  The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
  """
  messagingServiceId: String
  """
  The number of media files associated with the message.
  """
  numberOfMediaFiles: Int
  """
  The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
  """
  numberOfUnits: Int
  """
  Price of the message.
  """
  price: Price
  """
  A client reference.
  """
  reference: String
  """
  The scheduled date and time of the message.
  """
  scheduledAt: String
  """
  The date and time that the message was sent
  """
  sentAt: String
  """
  Status of the delivery of the message.
  """
  status: Status
  subject: String
  """
  The phone number that received the message.
  """
  to: String!
  """
  Set to sms for SMS messages and mms for MMS messages.
  """
  type: Type
  updatedAt: String
  updatedBy: String
  """
  Define a webhook to receive delivery notifications.
  """
  webhookUrl: String
}

enum Direction {
  inbound
  outboundapi
  outboundcall
  outboundreply
  unknown
}

"""
The error returned if your message status is failed or undelivered.
"""
type Error {
  """
  The error_code provides more information about the failure. If the message was successful, this value is null
  """
  code: String
  message: String
}

"""
Price of the message.
"""
type Price {
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """

  """
  perUnit: String
  """

  """
  totalAmount: String
}

type MessageList {
  data: [Message]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationSms {
  """
  Create Message
  """
  messagesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: MessageInput!
  ): UnifiedId
  """
  Delete Message
  """
  messagesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Message
  """
  messagesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: MessageInput!
  ): UnifiedId
}

input MessageInput {
  """
  The message text.
  """
  body: String!
  """
  The phone number that initiated the message.
  """
  from: String!
  """
  The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
  """
  messagingServiceId: String
  """
  A client reference.
  """
  reference: String
  """
  The scheduled date and time of the message.
  """
  scheduledAt: String
  subject: String
  """
  The phone number that received the message.
  """
  to: String!
  """
  Set to sms for SMS messages and mms for MMS messages.
  """
  type: Type
  """
  Define a webhook to receive delivery notifications.
  """
  webhookUrl: String
}

type Vault {
  """
  This endpoint returns custom settings and their defaults required by connection for a given resource.
  """
  connectionSettings(
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  This endpoint includes all the configured integrations and contains the required assets
  to build an integrations page where your users can install integrations.
  OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
  """
  connections(
    """
    Scope results to Unified API
    """
    api: String
    """
    Scopes results to connections that have been configured or not
    """
    configured: Boolean
  ): [Connection]
  """
  Consumer detail including their aggregated counts with the connections they have authorized.
  """
  consumer(
    """
    ID of the consumer to return
    """
    consumerId: String!
  ): Consumer
  """
  This endpoint includes all application consumers, along with an aggregated count of requests made.
  """
  consumers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
  ): [GetConsumersResponseListItem]
  """
  Get consumer request counts within a given datetime range.
  """
  consumersRequestCounts(
    """
    ID of the consumer to return
    """
    consumerId: String!
    """
    Scopes results to requests that happened before datetime
    """
    endDatetime: String!
    """
    Scopes results to requests that happened after datetime
    """
    startDatetime: String!
  ): ConsumerRequestCountsInDateRangeResponse
  """
  This endpoint includes all consumer request logs.
  """
  logs(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Filter results
    """
    filter: LogsFilterInput
    """
    Number of records to return
    """
    limit: Int
  ): LogList
}

type Connection {
  """
  Type of authorization used by the connector
  """
  authType: AuthType
  authorizeUrl: String
  configurableResources: [String]
  configuration: [ConfigurationListItem]
  createdAt: Float
  enabled: Boolean
  formFields: [FormField]
  icon: String
  id: String
  logo: String
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  name: String
  resourceSchemaSupport: [String]
  resourceSettingsSupport: [String]
  revokeUrl: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  settingsRequiredForAuthorization: [String]
  """
  [Connection state flow](#section/Connection-state)
  """
  state: ConnectionState
  status: Status
  tagLine: String
  unifiedApi: String
  updatedAt: Float
  website: String
}

enum AuthType {
  oauth2
  apiKey
  basic
  none
}

type ConfigurationListItem {
  defaults: [DefaultsListItem]
  resource: String
}

type DefaultsListItem {
  id: String
  options: [FormFieldOption]
  target: Target
  value: JSON
}

type FormFieldOption {
  id: String
  label: String
  options: [SimpleFormFieldOption]
  value: JSON
}

type SimpleFormFieldOption {
  label: String
  value: JSON
}

enum Target {
  custom_fields
  resource
}

type FormField {
  """
  Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
  """
  allowCustomValues: Boolean
  customField: Boolean
  description: String
  disabled: Boolean
  id: String
  label: String
  options: [FormFieldOption]
  placeholder: String
  required: Boolean
  type: Type
}

enum ConnectionState {
  available
  callable
  added
  authorized
}

type Consumer {
  aggregatedRequestCount: Float
  applicationId: String
  connections: [ConsumerConnection]
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type ConsumerConnection {
  """
  Type of authorization used by the connector
  """
  authType: AuthType
  consumerId: String
  createdAt: String
  enabled: Boolean
  icon: String
  id: String
  logo: String
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  name: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  state: State
  tagLine: String
  unifiedApi: String
  updatedAt: String
  website: String
}

enum State {
  available
  callable
  added
  configured
  authorized
}

type ConsumerMetadata {
  accountName: String
  email: String
  image: String
  userName: String
}

type RequestCountAllocation {
  proxy: Float
  unify: Float
  vault: Float
}

type GetConsumersResponseListItem {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type ConsumerRequestCountsInDateRangeResponse {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  endDatetime: String
  requestCounts: RequestCountAllocation
  startDatetime: String
}

type LogList {
  data: [Log]!
  """
  Response metadata
  """
  meta: Meta
}

type Log {
  """
  Indicates if the request was made via REST or Graphql endpoint.
  """
  apiStyle: String!
  """
  The Apideck base URL the request was made to.
  """
  baseUrl: String!
  """
  Indicates whether or not this is a child or parent request.
  """
  childRequest: Boolean!
  """
  The consumer Id associated with the request.
  """
  consumerId: String!
  """
  The entire execution time in milliseconds it took to call the Apideck service provider.
  """
  duration: Float!
  """
  If error occurred, this is brief explanation
  """
  errorMessage: String
  """
  The entire execution time in milliseconds it took to make the request.
  """
  execution: Int!
  """
  When request is a parent request, this indicates if there are child requests associated.
  """
  hasChildren: Boolean!
  """
  HTTP Method of request.
  """
  httpMethod: String!
  """
  UUID acting as Request Identifier.
  """
  id: String!
  """
  Latency added by making this request via Unified Api.
  """
  latency: Float!
  """
  The request as defined in OpenApi Spec.
  """
  operation: Operation!
  """
  When request is a child request, this UUID indicates it's parent request.
  """
  parentId: String!
  """
  The path component of the URI the request was made to.
  """
  path: String!
  """
  Indicates whether the request was made using Apidecks sandbox credentials or not.
  """
  sandbox: Boolean!
  """
  Apideck service provider associated with request.
  """
  service: Service!
  """
  The IP address of the source of the request.
  """
  sourceIp: String
  """
  HTTP Status code that was returned.
  """
  statusCode: Int!
  """
  Whether or not the request was successful.
  """
  success: Boolean!
  """
  ISO Date and time when the request was made.
  """
  timestamp: String!
  """
  Which Unified Api request was made to.
  """
  unifiedApi: UnifiedApi!
}

"""
The request as defined in OpenApi Spec.
"""
type Operation {
  """
  The OpenApi Operation Id associated with the request
  """
  id: String!
  """
  The OpenApi Operation name associated with the request
  """
  name: String!
}

"""
Apideck service provider associated with request.
"""
type Service {
  """
  Apideck service provider id.
  """
  id: String!
  """
  Apideck service provider name.
  """
  name: String!
}

enum UnifiedApi {
  crm
  lead
  proxy
  vault
  accounting
}

input LogsFilterInput {
  connectorId: String
  excludeUnifiedApis: String
  statusCode: Float
}

type MutationVault {
  """
  Update default values for a connection's resource settings
  """
  connectionSettingsUpdate(
    requestBody: ConnectionInput!
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Deletes a connection
  """
  connectionsDelete(
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): JSON
  """
  Update a connection
  """
  connectionsUpdate(
    requestBody: ConnectionInput!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
  url to allow temporary access to manage their integrations and settings.

  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
  """
  sessionsCreate(requestBody: SessionInput): CreateSessionResponse
}

input ConnectionInput {
  """
  Type of authorization used by the connector
  """
  authType: AuthType
  configuration: [ConfigurationListItemInput]
  enabled: Boolean
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
}

input ConfigurationListItemInput {
  defaults: [DefaultsListItemInput]
  resource: String
}

input DefaultsListItemInput {
  id: String
  options: [FormFieldOptionInput]
  value: JSON
}

input FormFieldOptionInput {
  id: String
  label: String
  options: [SimpleFormFieldOptionInput]
  value: JSON
}

input SimpleFormFieldOptionInput {
  label: String
  value: JSON
}

type CreateSessionResponse {
  sessionUri: String!
}

input SessionInput {
  consumerMetadata: ConsumerMetadataInput
  """
  Custom consumer settings that are passed as part of the session.
  """
  customConsumerSettings: JSON
  redirectUri: String
  settings: SessionSettingsInput
  theme: ThemeInput
}

input ConsumerMetadataInput {
  accountName: String
  email: String
  image: String
  userName: String
}

input SessionSettingsInput {
  hideResourceSettings: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.
  """
  isolationMode: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.
  """
  sandboxMode: Boolean
  """
  The duration of time the session is valid for (maximum 1 week).
  """
  sessionLength: String
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to \`true\`.
  """
  showLogs: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to \`true\`.
  """
  showSuggestions: Boolean
  """
  Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omiting this field will show all Unified APIs.
  """
  unifiedApis: [UnifiedApiId]
}

enum UnifiedApiId {
  vault
  lead
  crm
  accounting
  filestorage
  spreadsheet
  email
  script
  sms
  teammessaging
  ecommerce
  payroll
  customersupport
  timeregistration
  transactionalemail
  hcm
  form
  csp
  emailmarketing
  ats
  hris
}

input ThemeInput {
  favicon: String
  primaryColor: String
  privacyUrl: String
  sidepanelBackgroundColor: String
  sidepanelTextColor: String
  termsUrl: String
  vaultName: String
}
