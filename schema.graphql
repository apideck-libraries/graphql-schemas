type Query {
  lead: Lead
  crm: Crm
  accounting: Accounting
  vault: Vault
}

type Mutation {
  lead: MutationLead
  crm: MutationCrm
  accounting: MutationAccounting
  vault: MutationVault
}

type Lead {
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LeadList
  addresses: [Address]
  companyId: String
  companyName: String!
  contactId: String
  createdAt: String
  currency: String
  customFields: [CustomField]
  description: String
  emails: [Email]
  fax: String
  firstName: String
  id: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  prefix: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  title: String
  updatedAt: String
  websites: [Website]
}

type Address {
  """
  Name of city.
  """
  city: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  longitude: String
  name: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  """
  Name of state
  """
  state: String
  string: String
  type: AddressType
}

enum AddressType {
  primary
  secondary
  home
  office
  shipping
  billing
  other
}

type CustomField {
  id: String!
  value: JSON
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Email {
  email: String!
  id: String
  type: EmailType
}

enum EmailType {
  primary
  secondary
  work
  personal
  billing
  other
}

type PhoneNumber {
  id: String
  number: String!
  type: PhoneType
}

enum PhoneType {
  primary
  secondary
  home
  office
  mobile
  assistant
  fax
  other
}

type SocialLink {
  id: String
  type: String
  url: String!
}

type Website {
  id: String
  type: WebsiteType
  url: String!
}

enum WebsiteType {
  primary
  secondary
  work
  personal
  other
}

type LeadList {
  data: [Lead]!
  """
  Reponse metadata
  """
  meta: Meta
}

"""
Reponse metadata
"""
type Meta {
  """
  Cursors to navigate to previous or next pages through the API
  """
  cursors: Cursors
  """
  Number of items returned in the data property of the response
  """
  itemsOnPage: Int
}

"""
Cursors to navigate to previous or next pages through the API
"""
type Cursors {
  """
  Cursor to navigate to the current page of results through the API
  """
  current: String
  """
  Cursor to navigate to the next page of results through the API
  """
  next: String
  """
  Cursor to navigate to the previous page of results through the API
  """
  previous: String
}

type MutationLead {
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
}

type UnifiedId {
  id: String!
}

input LeadInput {
  addresses: [AddressInput]
  companyId: String
  companyName: String!
  contactId: String
  currency: String
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  title: String
  websites: [WebsiteInput]
}

input AddressInput {
  """
  Name of city.
  """
  city: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  longitude: String
  name: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  """
  Name of state
  """
  state: String
  string: String
  type: AddressType
}

input CustomFieldInput {
  id: String!
  value: JSON
}

input EmailInput {
  email: String!
  id: String
  type: EmailType
}

input PhoneNumberInput {
  id: String
  number: String!
  type: PhoneType
}

input SocialLinkInput {
  id: String
  type: String
  url: String!
}

input WebsiteInput {
  id: String
  type: WebsiteType
  url: String!
}

type Crm {
  """
  List activities
  """
  activities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ActivityList
  """
  Get activity
  """
  activity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Activity
  """
  List companies
  """
  companies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: CompaniesFilter
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: CompaniesSort
  ): CompanyList
  """
  Get company
  """
  company(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Company
  """
  Get contact
  """
  contact(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Contact
  """
  List contacts
  """
  contacts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: ContactsFilter
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: ContactsSort
  ): ContactList
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: LeadsFilter
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: LeadsSort
  ): LeadList
  """
  Get note
  """
  note(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Note
  """
  List notes
  """
  notes(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): NoteList
  """
  List opportunities
  """
  opportunities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters (beta)
    """
    filter: OpportunitiesFilter
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting (beta)
    """
    sort: OpportunitiesSort
  ): OpportunityList
  """
  Get opportunity
  """
  opportunity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Opportunity
  """
  Get pipeline
  """
  pipeline(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Pipeline
  """
  List pipelines
  """
  pipelines(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): PipelinesList
  """
  Get user
  """
  user(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): User
  """
  List users
  """
  users(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UserList
}

type ActivityList {
  data: [Activity]!
  """
  Reponse metadata
  """
  meta: Meta
}

type Activity {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  createdAt: String
  createdBy: String
  customFields: [CustomField]
  customObjectId: String
  deleted: Boolean
  description: String
  durationMinutes: Int
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  id: String
  leadId: String
  location: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: Type2!
  updatedAt: String
  updatedBy: String
}

enum ShowAs {
  free
  busy
}

enum Type2 {
  accounts_receivable
  bank
  current_asset
  non_current_asset
  other_asset
  equity
  expense
  other_expense
  costs_of_sales
  accounts_payable
  credit_card
  current_liability
  non_current_liability
  other_liability
  call
  meeting
  email
  note
  task
  sendletter
  sendquote
  other
}

type CompanyList {
  data: [Company]!
  """
  Reponse metadata
  """
  meta: Meta
}

type Company {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [Address]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccount]
  createdAt: String
  createdBy: String
  currency: String
  customFields: [CustomField]
  deleted: Boolean
  description: String
  emails: [Email]
  fax: String
  id: String
  image: String
  """
  Industry
  """
  industry: String
  interactionCount: Int
  lastActivityAt: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  """
  Parent ID
  """
  parentId: String
  payeeNumber: String
  phoneNumbers: [PhoneNumber]
  readOnly: Boolean
  salesTaxNumber: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  updatedAt: String
  updatedBy: String
  """
  VAT number
  """
  vatNumber: String
  websites: [Website]
}

type BankAccount {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  iban: String
}

input CompaniesFilter {
  """
  Name of the company to filter on
  """
  name: String
}

input CompaniesSort {
  """
  The field on which to sort the Companies
  """
  by: CompaniesSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum CompaniesSortBy {
  created_at
  updated_at
  name
}

enum SortDirection {
  asc
  desc
}

type Contact {
  active: Boolean
  addresses: [Address]
  birthday: String
  companyId: String
  companyName: String
  createdAt: String
  currentBalance: Float
  customFields: [CustomField]
  department: String
  description: String
  emails: [Email]
  fax: String
  firstCallAt: String
  firstEmailAt: String
  firstName: String
  gender: Gender
  id: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastActivityAt: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  prefix: String
  socialLinks: [SocialLink]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  updatedAt: String
  websites: [Website]
}

enum Gender {
  male
  female
  unisex
}

enum Type {
  text
  checkbox
  tel
  email
  url
  textarea
  select
  filteredselect
  multiselect
  datetime
  date
  time
  number
  customer
  supplier
  employee
  personal
}

type ContactList {
  data: [Contact]!
  """
  Reponse metadata
  """
  meta: Meta
}

input ContactsFilter {
  """
  E-mail of the contact to filter on
  """
  email: String
  """
  First name of the contact to filter on
  """
  firstName: String
  """
  Last name of the contact to filter on
  """
  lastName: String
  """
  Name of the contact to filter on
  """
  name: String
}

input ContactsSort {
  """
  The field on which to sort the Contacts
  """
  by: ContactsSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum ContactsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

input LeadsFilter {
  """
  E-mail of the lead to filter on
  """
  email: String
  """
  First name of the lead to filter on
  """
  firstName: String
  """
  Last name of the lead to filter on
  """
  lastName: String
  """
  Name of the lead to filter on
  """
  name: String
}

input LeadsSort {
  """
  The field on which to sort the Leads
  """
  by: LeadsSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum LeadsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

type Note {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  createdAt: String
  createdBy: String
  id: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
  updatedAt: String
  updatedBy: String
}

type NoteList {
  data: [Note]!
  """
  Reponse metadata
  """
  meta: Meta
}

type OpportunityList {
  data: [Opportunity]!
  """
  Reponse metadata
  """
  meta: Meta
}

type Opportunity {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  createdAt: String
  createdBy: String
  currency: String
  customFields: [CustomField]
  dateLastContacted: String
  dateLeadCreated: String
  dateStageChanged: String
  deleted: Boolean
  description: String
  """
  Expected Revenue
  """
  expectedRevenue: Float
  id: String
  interactionCount: Float
  lastActivityAt: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  updatedAt: String
  updatedBy: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input OpportunitiesFilter {
  """
  Monetary amount to filter on
  """
  monetaryAmount: Float
  """
  Status to filter on
  """
  status: String
  """
  Title of the opportunity to filter on
  """
  title: String
  """
  Win probability to filter on
  """
  winProbability: Float
}

input OpportunitiesSort {
  """
  The field on which to sort the Opportunities
  """
  by: OpportunitiesSortBy!
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum OpportunitiesSortBy {
  created_at
  updated_at
  title
  win_probability
  monetary_amount
  status
}

type Pipeline {
  archived: Boolean
  createdAt: String
  currency: String
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItem]
  updatedAt: String
}

type StagesListItem {
  displayOrder: Int
  id: String
  name: String
  value: String
}

type PipelinesList {
  data: [Pipeline]!
  """
  Reponse metadata
  """
  meta: Meta
}

type User {
  createdAt: String
  email: String!
  firstName: String
  id: String
  image: String
  language: String
  lastName: String
  parentId: String
  status: String
  updatedAt: String
  username: String
}

type UserList {
  data: [User]!
  """
  Reponse metadata
  """
  meta: Meta
}

type MutationCrm {
  """
  Create activity
  """
  activitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Delete activity
  """
  activitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update activity
  """
  activitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Create company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Delete company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Create contact
  """
  contactsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Delete contact
  """
  contactsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update contact
  """
  contactsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Create note
  """
  notesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Delete note
  """
  notesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update note
  """
  notesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Create opportunity
  """
  opportunitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Delete opportunity
  """
  opportunitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update opportunity
  """
  opportunitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Create pipeline
  """
  pipelinesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Delete pipeline
  """
  pipelinesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update pipeline
  """
  pipelinesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Create user
  """
  usersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
  """
  Delete user
  """
  usersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update user
  """
  usersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
}

input ActivityInput {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  customFields: [CustomFieldInput]
  customObjectId: String
  deleted: Boolean
  description: String
  durationMinutes: Int
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  leadId: String
  location: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: Type2!
}

input CompanyInput {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [AddressInput]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccountInput]
  currency: String
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  image: String
  """
  Industry
  """
  industry: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  payeeNumber: String
  phoneNumbers: [PhoneNumberInput]
  readOnly: Boolean
  salesTaxNumber: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  """
  VAT number
  """
  vatNumber: String
  websites: [WebsiteInput]
}

input BankAccountInput {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  iban: String
}

input ContactInput {
  active: Boolean
  addresses: [AddressInput]
  birthday: String
  companyId: String
  companyName: String
  currentBalance: Float
  customFields: [CustomFieldInput]
  department: String
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  gender: Gender
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  websites: [WebsiteInput]
}

input NoteInput {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
}

input OpportunityInput {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  currency: String
  customFields: [CustomFieldInput]
  description: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input PipelineInput {
  archived: Boolean
  currency: String
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItemInput]
}

input StagesListItemInput {
  displayOrder: Int
  name: String
  value: String
}

input UserInput {
  email: String!
  firstName: String
  image: String
  language: String
  lastName: String
  parentId: String
  password: String
  status: String
  username: String
}

type Accounting {
  """
  List Companies
  """
  companies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CompanyList
  """
  Get Company
  """
  company(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Company
  """
  Get Contact
  """
  contact(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Contact
  """
  List Contacts
  """
  contacts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ContactList
  """
  Get Invoice
  """
  invoice(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Invoice
  """
  List Invoices
  """
  invoices(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceList
  """
  Get Ledger Account
  """
  ledgerAccount(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccount
  """
  List Ledger Accounts
  """
  ledgerAccounts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccountList
  """
  Get Tax Rate
  """
  taxRate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRate
  """
  List Tax Rates
  """
  taxRates(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRateList
}

type Invoice {
  balance: Float
  billingAddress: Address
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The customer this invoice is linked to.
  """
  customer: Customer
  customerMemo: String
  """
  Date invoice was issued - YYYY-MM-DD
  """
  date: String
  deposit: Float
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD
  """
  dueDate: String
  id: String
  lineItems: [LineItemsListItem]
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  shippingAddress: Address
  """
  Invoice status
  """
  status: Status
  subTotal: Float
  total: Float
  totalTax: Float
  """

  """
  type: String
  updatedAt: String
  updatedBy: String
}

enum Currency {
  UNKNOWN_CURRENCY
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  USS
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XTS
  XXX
  YER
  ZAR
  ZMK
  ZMW
  BTC
}

"""
The customer this invoice is linked to.
"""
type Customer {
  companyName: String
  id: String
}

type LineItemsListItem {
  description: String
  discountPercentage: Int
  generalLedgerAccount: GeneralLedgerAccount
  id: String
  """
  ID of the linked item
  """
  itemId: Int
  lineNumber: Int
  quantity: Int
  taxAmount: Int
  taxRate: TaxRate2
  totalAmount: Int
  type: String
  unitPrice: Int
}

type GeneralLedgerAccount {
  id: String
  name: String
}

type TaxRate2 {
  code: String
  id: String
  name: String
}

enum Status {
  live
  upcoming
  requested
  draft
  submitted
  partially_paid
  paid
  void
}

type InvoiceList {
  data: [Invoice]!
  """
  Reponse metadata
  """
  meta: Meta
}

type LedgerAccount {
  active: Boolean
  bankAccount: BankAccount
  classification: Classification
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The current balance. A positive integer representing the smallest currency unit (e.g., 20000 cents equals $200.00 or 20000 equals ¥20000, a zero-decimal currency)
  """
  currentBalance: Float
  description: String
  displayId: String
  fullyQualifiedName: String
  id: String
  """
  Reconciliation Date means the last calendar day of each Reconciliation Period.
  """
  lastReconciliationDate: String
  level: String
  name: String
  nominalCode: String
  """
  The opening balance. A positive integer representing the smallest currency unit (e.g., 100 cents equals $1.00 or 100 equals ¥100, a zero-decimal currency)
  """
  openingBalance: Float
  parentAccount: ParentAccount
  subAccount: Boolean
  subAccounts: [SubAccountsListItem]
  subType: String
  taxCode: String
  taxType: String
  type: Type2
  updatedAt: String
  updatedBy: String
}

enum Classification {
  asset
  equity
  expense
  liability
  revenue
  income
  other_income
  other_expense
  costs_of_sales
}

type ParentAccount {
  displayId: String
  id: String
  name: String
}

type SubAccountsListItem {
  accountSubName: String
  id: String
}

type LedgerAccountList {
  data: [LedgerAccount]!
  """
  Reponse metadata
  """
  meta: Meta
}

type TaxRate {
  active: Boolean
  code: String
  components: [ComponentsListItem]
  createdAt: String
  createdBy: String
  description: String
  effectiveTaxRate: Float
  id: String
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  """
  Special tax type to handle zero rate taxes. Used with VAT registered Businesses who receive goods/services (acquisitions) from other EU countries, will need to calculate the VAT due, but not paid, on these acquisitions. The rate of VAT payable is the same that would have been paid if the goods had been supplied by a UK supplier.
  """
  specialTaxType: String
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
  updatedAt: String
  updatedBy: String
}

type ComponentsListItem {
  compound: Boolean
  name: String
  rate: Float
}

type TaxRateList {
  data: [TaxRate]!
  """
  Reponse metadata
  """
  meta: Meta
}

type MutationAccounting {
  """
  Create Company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Delete Company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Create Contact
  """
  contactsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Delete Contact
  """
  contactsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Contact
  """
  contactsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Create Invoice
  """
  invoicesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): UnifiedId
  """
  Delete Invoice
  """
  invoicesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Invoice
  """
  invoicesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): UnifiedId
  """
  Create Ledger Account
  """
  ledgerAccountsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Delete Ledger Account
  """
  ledgerAccountsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Ledger Account
  """
  ledgerAccountsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Create Tax Rate
  """
  taxRatesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
  """
  Delete Tax Rate
  """
  taxRatesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Tax Rate
  """
  taxRatesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
}

input InvoiceInput {
  balance: Float
  billingAddress: AddressInput
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The customer this invoice is linked to.
  """
  customer: CustomerInput
  customerMemo: String
  """
  Date invoice was issued - YYYY-MM-DD
  """
  date: String
  deposit: Float
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD
  """
  dueDate: String
  lineItems: [LineItemsListItemInput]
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  shippingAddress: AddressInput
  """
  Invoice status
  """
  status: Status
  subTotal: Float
  total: Float
  totalTax: Float
  """

  """
  type: String
}

"""
The customer this invoice is linked to.
"""
input CustomerInput {
  companyName: String
}

input LineItemsListItemInput {
  description: String
  discountPercentage: Int
  generalLedgerAccount: GeneralLedgerAccountInput
  """
  ID of the linked item
  """
  itemId: Int
  lineNumber: Int
  quantity: Int
  taxAmount: Int
  taxRate: TaxRate2Input
  totalAmount: Int
  type: String
  unitPrice: Int
}

input GeneralLedgerAccountInput {
  name: String
}

input TaxRate2Input {
  code: String
  name: String
}

input LedgerAccountInput {
  active: Boolean
  bankAccount: BankAccountInput
  classification: Classification
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The current balance. A positive integer representing the smallest currency unit (e.g., 20000 cents equals $200.00 or 20000 equals ¥20000, a zero-decimal currency)
  """
  currentBalance: Float
  description: String
  fullyQualifiedName: String
  level: String
  name: String
  nominalCode: String
  """
  The opening balance. A positive integer representing the smallest currency unit (e.g., 100 cents equals $1.00 or 100 equals ¥100, a zero-decimal currency)
  """
  openingBalance: Float
  subAccount: Boolean
  subType: String
  taxCode: String
  taxType: String
  type: Type2
}

input TaxRateInput {
  active: Boolean
  code: String
  components: [ComponentsListItemInput]
  description: String
  effectiveTaxRate: Float
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  """
  Special tax type to handle zero rate taxes. Used with VAT registered Businesses who receive goods/services (acquisitions) from other EU countries, will need to calculate the VAT due, but not paid, on these acquisitions. The rate of VAT payable is the same that would have been paid if the goods had been supplied by a UK supplier.
  """
  specialTaxType: String
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
}

input ComponentsListItemInput {
  compound: Boolean
  name: String
  rate: Float
}

type Vault {
  """
  This endpoint returns custom settings and their defaults required by connection for a given resource.
  """
  connectionSettings(
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  This endpoint includes all the configured integrations and contains the required assets
  to build an integrations page where your users can install integrations.
  OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
  """
  connections(
    """
    Scope results to Unified API
    """
    api: String
    """
    Scopes results to connections that have been configured or not
    """
    configured: Boolean
  ): [Connection]
  """
  Consumer detail including their aggregated counts with the connections they have authorized.
  """
  consumer(
    """
    ID of the consumer to return
    """
    consumerId: String!
  ): Consumer
  """
  This endpoint includes all application consumers, along with an aggregated count of requests made.
  """
  consumers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
  ): [GetConsumersResponseListItem]
  """
  Get consumer request counts within a given datetime range.
  """
  consumersRequestCounts(
    """
    ID of the consumer to return
    """
    consumerId: String!
    """
    Scopes results to requests that happened before datetime
    """
    endDatetime: String!
    """
    Scopes results to requests that happened after datetime
    """
    startDatetime: String!
  ): ConsumerRequestCountsInDateRangeResponse
  """
  This endpoint includes all consumer request logs.
  """
  logs(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Filter results
    """
    filter: FilterInput
    """
    Number of records to return
    """
    limit: Int
  ): LogList
}

type Connection {
  authType: AuthType
  authorizeUrl: String
  configurableResources: [String]
  configuration: [ConfigurationListItem]
  createdAt: Float
  enabled: Boolean
  formFields: [FormField]
  icon: String
  id: String
  logo: String
  metadata: Metadata
  name: String
  resourceSchemaSupport: [String]
  resourceSettingsSupport: [String]
  revokeUrl: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  settingsRequiredForAuthorization: [String]
  state: ConnectionState
  status: Status
  tagLine: String
  unifiedApi: String
  updatedAt: Float
  website: String
}

enum AuthType {
  oauth2
  apiKey
  basic
  none
}

type ConfigurationListItem {
  defaults: [DefaultsListItem]
  resource: String
}

type DefaultsListItem {
  id: String
  options: [FormFieldOption]
  target: Target
  value: JSON
}

type FormFieldOption {
  id: String
  label: String
  options: [SimpleFormFieldOption]
  value: JSON
}

type SimpleFormFieldOption {
  label: String
  value: JSON
}

enum Target {
  custom_fields
  resource
}

type FormField {
  customField: Boolean
  description: String
  disabled: Boolean
  id: String
  label: String
  options: [FormFieldOption]
  placeholder: String
  required: Boolean
  type: Type
}

type Metadata {
  account: ConnectionMetadata
  ecosystem: ConnectionMetadata
}

type ConnectionMetadata {
  id: String
  name: String
}

enum ConnectionState {
  available
  callable
  added
  authorized
}

type Consumer {
  aggregatedRequestCount: Float
  applicationId: String
  connections: [ConnectionsListItem]
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type ConnectionsListItem {
  authType: AuthType
  createdAt: String
  enabled: Boolean
  icon: String
  id: String
  logo: String
  name: String
  serviceId: String
  state: State
  unifiedApi: String
  updatedAt: String
}

enum State {
  available
  callable
  added
  configured
  authorized
}

type ConsumerMetadata {
  accountName: String
  email: String
  image: String
  userName: String
}

type RequestCountAllocation {
  proxy: Float
  unify: Float
  vault: Float
}

type GetConsumersResponseListItem {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type ConsumerRequestCountsInDateRangeResponse {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  endDatetime: String
  requestCounts: RequestCountAllocation
  startDatetime: String
}

type LogList {
  data: [Log]!
  """
  Reponse metadata
  """
  meta: Meta
}

type Log {
  """
  Indicates if the request was made via REST or Graphql endpoint.
  """
  apiStyle: String!
  """
  The Apideck base URL the request was made to.
  """
  baseUrl: String!
  """
  Indicates whether or not this is a child or parent request.
  """
  childRequest: Boolean!
  """
  The consumer Id associated with the request.
  """
  consumerId: String!
  """
  The entire execution time in milliseconds it took to call the Apideck service provider.
  """
  duration: Float!
  """
  If error occured, this is brief explanation
  """
  errorMessage: String
  """
  The entire execution time in milliseconds it took to make the request.
  """
  execution: Int!
  """
  When request is a parent request, this indicates if there are child requests associated.
  """
  hasChildren: Boolean!
  """
  HTTP Method of request.
  """
  httpMethod: String!
  """
  UUID acting as Request Identifier.
  """
  id: String!
  """
  Latency added by making this request via Unified Api.
  """
  latency: Float!
  """
  The request as defined in OpenApi Spec.
  """
  operation: Operation!
  """
  When request is a child request, this UUID indicates it's parent request.
  """
  parentId: String!
  """
  The path component of the URI the request was made to.
  """
  path: String!
  """
  Indicates whether the request was made using Apidecks sandbox credentials or not.
  """
  sandbox: Boolean!
  """
  Apideck service provider associated with request.
  """
  service: Service!
  """
  The IP address of the source of the request.
  """
  sourceIp: String
  """
  HTTP Status code that was returned.
  """
  statusCode: Int!
  """
  Whether or not the request was successful.
  """
  success: Boolean!
  """
  ISO Date and time when the request was made.
  """
  timestamp: String!
  """
  Which Unified Api request was made to.
  """
  unifiedApi: UnifiedApi!
}

"""
The request as defined in OpenApi Spec.
"""
type Operation {
  """
  The OpenApi Operation Id associated with the request
  """
  id: String!
  """
  The OpenApi Operation name associated with the request
  """
  name: String!
}

"""
Apideck service provider associated with request.
"""
type Service {
  """
  Apideck service provider id.
  """
  id: String!
  """
  Apideck service provider name.
  """
  name: String!
}

enum UnifiedApi {
  crm
  lead
  proxy
  vault
}

input FilterInput {
  connectorId: String
  excludeUnifiedApis: String
  statusCode: Float
}

type MutationVault {
  """
  Update default values for a connection's resource settings
  """
  connectionSettingsUpdate(
    requestBody: ConnectionInput!
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Deletes a connection
  """
  connectionsDelete(
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): JSON
  """
  Update a connection
  """
  connectionsUpdate(
    requestBody: CreateConnectionRequestBodyInput!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
  url to allow temporary access to manage their integrations and settings.

  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
  """
  sessionsCreate(requestBody: SessionRequestInput): Session
}

input ConnectionInput {
  authType: AuthType
  authorizeUrl: String
  configurableResources: [String]
  configuration: [ConfigurationListItemInput]
  createdAt: Float
  enabled: Boolean
  formFields: [FormFieldInput]
  icon: String
  logo: String
  metadata: MetadataInput
  name: String
  resourceSchemaSupport: [String]
  resourceSettingsSupport: [String]
  revokeUrl: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  settingsRequiredForAuthorization: [String]
  state: ConnectionState
  status: Status
  tagLine: String
  unifiedApi: String
  updatedAt: Float
  website: String
}

input ConfigurationListItemInput {
  defaults: [DefaultsListItemInput]
  resource: String
}

input DefaultsListItemInput {
  id: String
  options: [FormFieldOptionInput]
  value: JSON
}

input FormFieldOptionInput {
  id: String
  label: String
  options: [SimpleFormFieldOptionInput]
  value: JSON
}

input SimpleFormFieldOptionInput {
  label: String
  value: JSON
}

input FormFieldInput {
  customField: Boolean
  description: String
  disabled: Boolean
  id: String
  label: String
  options: [FormFieldOptionInput]
  placeholder: String
  required: Boolean
  type: Type
}

input MetadataInput {
  account: ConnectionMetadataInput
  ecosystem: ConnectionMetadataInput
}

input ConnectionMetadataInput {
  id: String
  name: String
}

input CreateConnectionRequestBodyInput {
  enabled: Boolean
  metadata: MetadataInput
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
}

type Session {
  sessionUri: String
}

input SessionRequestInput {
  consumerMetadata: ConsumerMetadataInput
  redirectUri: String
  settings: SessionSettings
  theme: ThemeInput
}

input ConsumerMetadataInput {
  accountName: String
  email: String
  image: String
  userName: String
}

input SessionSettings {
  hideResourceSettings: Boolean
  sandboxMode: Boolean
  """
  The duration of time the session is valid for (maximum 1 week).
  """
  sessionLength: String
  showLogs: Boolean
}

input ThemeInput {
  favicon: String
  primaryColor: String
  privacyUrl: String
  sidepanelBackgroundColor: String
  sidepanelTextColor: String
  termsUrl: String
  vaultName: String
}
