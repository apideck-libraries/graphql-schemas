type Query {
  accounting: Accounting
  ats: Ats
  crm: Crm
  customerSupport: CustomerSupport
  fileStorage: FileStorage
  hris: Hris
  lead: Lead
  sms: Sms
  vault: Vault
}

type Mutation {
  accounting: MutationAccounting
  crm: MutationCrm
  customerSupport: MutationCustomerSupport
  fileStorage: MutationFileStorage
  hris: MutationHris
  lead: MutationLead
  sms: MutationSms
  vault: MutationVault
}

type Accounting {
  """
  List Credit Notes
  """
  CreditNotes(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): GetCreditNotesResponse
  """
  List Payments
  """
  Payments(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): PaymentList
  """
  List Suppliers
  """
  Suppliers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): SupplierList
  """
  Get BalanceSheet
  """
  balanceSheet(
    """
    Apply filters
    """
    filter: BalanceSheetFilterInput
    """
    Optional unmapped key/values that will be passed through to downstream as query parameters
    """
    passThrough: PassThroughInput
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): BalanceSheet
  """
  Get Bill
  """
  bill(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Bill
  """
  List Bills
  """
  bills(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): BillList
  """
  Get company info
  """
  companyInfo(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CompanyInfo
  """
  Get Credit Note
  """
  creditNote(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CreditNote
  """
  Get Customer
  """
  customer(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Customer
  """
  List Customers
  """
  customers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: CustomersFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerList
  """
  Get Invoice
  """
  invoice(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Invoice
  """
  Get Invoice Item
  """
  invoiceItem(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceItem
  """
  List Invoice Items
  """
  invoiceItems(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: InvoiceItemsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceItemList
  """
  List Invoices
  """
  invoices(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: InvoicesSortInput
  ): InvoiceList
  """
  Get Ledger Account
  """
  ledgerAccount(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccount
  """
  List Ledger Accounts
  """
  ledgerAccounts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): LedgerAccountList
  """
  Get Payment
  """
  payment(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Payment
  """
  Get Profit and Loss
  """
  profitAndLoss(
    """
    Apply filters
    """
    filter: ProfitAndLossFilterInput
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ProfitAndLoss
  """
  Get Supplier
  """
  supplier(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Supplier
  """
  Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
  """
  taxRate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRate
  """
  List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
  """
  taxRates(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: TaxRatesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TaxRateList
}

type GetCreditNotesResponse {
  data: [CreditNote]!
  """
  Response metadata
  """
  meta: Meta
}

type CreditNote {
  allocations: [AllocationsListItem]
  """
  The balance reflecting any payments made against the transaction.
  """
  balance: Float
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomer
  """
  Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
  """
  dateIssued: String
  """
  Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
  """
  datePaid: String
  """
  Unique identifier representing the entity
  """
  id: String
  lineItems: [InvoiceLineItem]
  """
  Optional note to be associated with the credit note.
  """
  note: String
  """
  Credit note number.
  """
  number: String
  """
  Optional reference message ie: Debit remittance detail.
  """
  reference: String
  """
  Indicates the total credit amount still available to apply towards the payment.
  """
  remainingCredit: Float
  rowVersion: String
  """
  Status of payment
  """
  status: CreditNoteStatus
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Amount of transaction
  """
  totalAmount: Float!
  """
  Total tax amount applied to this invoice.
  """
  totalTax: Float
  """
  Type of payment
  """
  type: CreditNoteType
  updatedAt: String
}

type AllocationsListItem {
  """
  Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
  """
  amount: Float
  code: String
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  """
  Type of entity this payment should be attributed to.
  """
  type: AllocationType
}

enum AllocationType {
  invoice
  order
  expense
  credit_memo
  over_payment
  pre_payment
}

enum Currency {
  UNKNOWN_CURRENCY
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRC
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  USS
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XTS
  XXX
  YER
  ZAR
  ZMK
  ZMW
  BTC
}

"""
The customer this entity is linked to.
"""
type LinkedCustomer {
  """
  The company name of the customer.
  """
  companyName: String
  """
  The display ID of the customer.
  """
  displayId: String
  """
  The display name of the customer.
  """
  displayName: String
  """
  The ID of the customer this entity is linked to.
  """
  id: String!
}

type InvoiceLineItem {
  """
  User defined item code
  """
  code: String
  """
  User defined description
  """
  description: String
  """
  Discount percentage
  """
  discountPercentage: Float
  id: String
  item: LinkedInvoiceItem
  ledgerAccount: LinkedLedgerAccount
  """
  Line number in the invoice
  """
  lineNumber: Int
  quantity: Float
  """
  Row ID
  """
  rowId: String
  rowVersion: String
  """
  Tax amount
  """
  taxAmount: Float
  taxRate: LinkedTaxRate
  """
  Total amount of the line item
  """
  totalAmount: Float
  """
  Item type
  """
  type: InvoiceLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type LinkedInvoiceItem {
  """
  User defined item code
  """
  code: String
  """
  ID of the linked item. A reference to the [invoice item](https://developers.apideck.com/apis/accounting/reference#tag/Invoice-Items) that was used to create this line item
  """
  id: String
  """
  User defined item name
  """
  name: String
}

type LinkedLedgerAccount {
  """
  The code assigned to the account.
  """
  code: String
  """
  The unique identifier for the account.
  """
  id: String
  """
  The name of the account.
  """
  name: String
  """
  The nominal code of the account.
  """
  nominalCode: String
}

type LinkedTaxRate {
  """
  Tax rate code
  """
  code: String
  """
  The ID of the object.
  """
  id: String
  """
  Name of the tax rate
  """
  name: String
}

enum InvoiceLineItemType {
  sales_item
  discount
  info
  sub_total
}

enum CreditNoteStatus {
  draft
  authorised
  paid
  voided
  deleted
}

enum CreditNoteType {
  accounts_receivable_credit
  accounts_payable_credit
}

"""
Response metadata
"""
type Meta {
  """
  Cursors to navigate to previous or next pages through the API
  """
  cursors: Cursors
  """
  Number of items returned in the data property of the response
  """
  itemsOnPage: Int
}

"""
Cursors to navigate to previous or next pages through the API
"""
type Cursors {
  """
  Cursor to navigate to the current page of results through the API
  """
  current: String
  """
  Cursor to navigate to the next page of results through the API
  """
  next: String
  """
  Cursor to navigate to the previous page of results through the API
  """
  previous: String
}

type PaymentList {
  data: [Payment]!
  """
  Response metadata
  """
  meta: Meta
}

type Payment {
  account: LinkedLedgerAccount
  """
  Unique identifier for the account to allocate payment to.
  """
  accountsReceivableAccountId: String
  """
  Type of accounts receivable account.
  """
  accountsReceivableAccountType: String
  allocations: [PaymentAllocation]
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomer
  """
  Unique identifier representing the entity
  """
  id: String
  """
  Optional note to be associated with the payment.
  """
  note: String
  """
  Payment method
  """
  paymentMethod: String
  """
  Optional reference message returned by payment method on processing
  """
  paymentMethodReference: String
  """
  Payment has been reconciled
  """
  reconciled: Boolean
  """
  Optional payment reference message ie: Debit remittance detail.
  """
  reference: String
  rowVersion: String
  """
  Status of payment
  """
  status: PaymentStatus
  """
  Amount of payment
  """
  totalAmount: Float!
  """
  Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
  """
  transactionDate: String!
  """
  Type of payment
  """
  type: PaymentType
  updatedAt: String
}

type PaymentAllocation {
  """
  Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
  """
  amount: Float
  code: String
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  """
  Type of entity this payment should be attributed to.
  """
  type: AllocationType
}

enum PaymentStatus {
  authorised
  paid
  voided
  deleted
}

enum PaymentType {
  accounts_receivable
  accounts_payable
  accounts_receivable_credit
  accounts_payable_credit
  accounts_receivable_overpayment
  accounts_payable_overpayment
  accounts_receivable_prepayment
  accounts_payable_prepayment
}

type SupplierList {
  data: [Supplier]!
  """
  Response metadata
  """
  meta: Meta
}

type Supplier {
  account: LinkedLedgerAccount
  addresses: [Address]
  bankAccounts: [BankAccount]
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Display name of supplier.
  """
  displayName: String
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  emails: [Email]
  firstName: String
  id: String
  lastName: String
  middleName: String
  notes: String
  phoneNumbers: [PhoneNumber]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  suffix: String
  taxNumber: String
  taxRate: LinkedTaxRate
  title: String
  updatedAt: String
  updatedBy: String
  websites: [Website]
}

type Address {
  """
  Name of city.
  """
  city: String
  contactName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  """
  Address field that holds a sublocality, such as a county
  """
  county: String
  email: String
  fax: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  """
  Line 3 of the address
  """
  line3: String
  """
  Line 4 of the address
  """
  line4: String
  longitude: String
  name: String
  phoneNumber: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  rowVersion: String
  salutation: String
  """
  Name of state
  """
  state: String
  """
  Street number
  """
  streetNumber: String
  string: String
  type: AddressType
  website: String
}

enum AddressType {
  primary
  secondary
  home
  office
  shipping
  billing
  other
}

type BankAccount {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  The type of bank account.
  """
  accountType: AccountType
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A branch identifier is a unique identifier for a branch of a bank or financial institution.
  """
  branchIdentifier: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  iban: String
}

enum AccountType {
  bank_account
  credit_card
  other
}

type Email {
  email: String!
  id: String
  type: EmailType
}

enum EmailType {
  primary
  secondary
  work
  personal
  billing
  other
}

type PhoneNumber {
  areaCode: String
  countryCode: String
  extension: String
  id: String
  number: String!
  type: PhoneType
}

enum PhoneType {
  primary
  secondary
  home
  work
  office
  mobile
  assistant
  fax
  directdialin
  personal
  other
}

enum CustomerStatus {
  active
  archived
  gdprerasurerequest
  unknown
  inactive
}

type Website {
  id: String
  type: WebsiteType
  url: String!
}

enum WebsiteType {
  primary
  secondary
  work
  personal
  other
}

type BalanceSheet {
  assets: Assets!
  createdAt: String
  createdBy: String
  """
  The start date of the report
  """
  endDate: String
  equity: Equity!
  id: String
  liabilities: Liabilities!
  """
  The name of the report
  """
  reportName: String!
  """
  The start date of the report
  """
  startDate: String!
  updatedAt: String
  updatedBy: String
}

type Assets {
  currentAssets: CurrentAssets!
  fixedAssets: FixedAssets!
  """
  Total assets
  """
  total: Float!
}

type CurrentAssets {
  accounts: [CurrentAssetAccountsList]!
  """
  Total current assets
  """
  total: Float!
}

type CurrentAssetAccountsList {
  id: String
  """
  The name of the current asset account
  """
  name: String
  """
  The value of the current asset
  """
  value: Float
}

type FixedAssets {
  accounts: [FixedAssetAccountsList]!
  """
  Total fixed assets
  """
  total: Float!
}

type FixedAssetAccountsList {
  id: String
  """
  The name of the fixed asset account
  """
  name: String
  """
  The value of the fixed asset
  """
  value: Float
}

type Equity {
  items: [EquityItemsList]!
  """
  Total equity
  """
  total: Float!
}

type EquityItemsList {
  id: String
  """
  The type of the equity
  """
  name: String
  """
  The equity amount
  """
  value: Float
}

type Liabilities {
  accounts: [LiabilityAccountsList]!
  """
  Total liabilities
  """
  total: Float!
}

type LiabilityAccountsList {
  id: String
  """
  The name of the liability account
  """
  name: String
  """
  The value of the liability
  """
  value: Float
}

input BalanceSheetFilterInput {
  """
  Filter by end date. If end date is given, start date is required.
  """
  endDate: String
  """
  Filter by start date. If start date is given, end date is required.
  """
  startDate: String
}

input PassThroughInput {
  """
  All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)
  """
  exampleDownstreamProperty: String
}

type Bill {
  """
  Balance of bill due.
  """
  balance: Float
  """
  Date bill was issued - YYYY-MM-DD.
  """
  billDate: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  Amount of deposit made to this bill.
  """
  deposit: Float
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  """
  The due date is the date on which a payment is scheduled to be received by the supplier - YYYY-MM-DD.
  """
  dueDate: String
  id: String
  ledgerAccount: LinkedLedgerAccount
  lineItems: [BillLineItem]
  notes: String
  """
  The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
  """
  paidDate: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  """
  Optional invoice reference.
  """
  reference: String
  rowVersion: String
  """
  Invoice status
  """
  status: Status
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  The supplier this entity is linked to.
  """
  supplier: LinkedSupplier
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Terms of payment.
  """
  terms: String
  """
  Total amount of bill, including tax.
  """
  total: Float
  """
  Total tax amount applied to this bill.
  """
  totalTax: Float
  updatedAt: String
  updatedBy: String
}

type BillLineItem {
  """
  User defined item code
  """
  code: String
  """
  User defined description
  """
  description: String
  """
  Discount percentage
  """
  discountPercentage: Float
  id: String
  item: LinkedInvoiceItem
  ledgerAccount: LinkedLedgerAccount
  """
  Line number in the invoice
  """
  lineNumber: Int
  quantity: Float
  """
  Row ID
  """
  rowId: String
  rowVersion: String
  """
  Tax amount
  """
  taxAmount: Float
  taxRate: LinkedTaxRate
  """
  Total amount of the line item
  """
  totalAmount: Float
  """
  Bill Line Item type
  """
  type: BillLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

enum BillLineItemType {
  expense_item
  expense_account
}

enum Status {
  live
  upcoming
  requested
  accepted
  scheduled
  canceled
  queued
  sending
  sent
  failed
  delivered
  undelivered
  receiving
  received
  read
  active
  inactive
  trial
  other
  tentative
  declined
  draft
  submitted
  authorised
  partially_paid
  paid
  void
  credit
  deleted
}

"""
The supplier this entity is linked to.
"""
type LinkedSupplier {
  address: Address
  """
  The company name of the supplier.
  """
  companyName: String
  """
  The display name of the supplier.
  """
  displayName: String
  """
  The ID of the supplier this entity is linked to.
  """
  id: String!
}

type BillList {
  data: [Bill]!
  """
  Response metadata
  """
  meta: Meta
}

type CompanyInfo {
  addresses: [Address]
  """
  Whether sales tax is calculated automatically for the company
  """
  automatedSalesTax: Boolean
  companyName: String
  """
  Date when company file was created
  """
  companyStartDate: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  defaultSalesTax: LinkedTaxRate
  emails: [Email]
  """
  The start month of fiscal year.
  """
  fiscalYearStartMonth: FiscalYearStartMonth
  id: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  """
  The legal name of the company
  """
  legalName: String
  phoneNumbers: [PhoneNumber]
  rowVersion: String
  """
  Whether sales tax is enabled for the company
  """
  salesTaxEnabled: Boolean
  salesTaxNumber: String
  """
  Based on the status some functionality is enabled or disabled.
  """
  status: CompanyStatus
  updatedAt: String
  updatedBy: String
}

enum FiscalYearStartMonth {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum CompanyStatus {
  active
  inactive
}

type Customer {
  addresses: [Address]
  bankAccounts: [BankAccount]
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Display ID
  """
  displayId: String
  """
  Display Name
  """
  displayName: String
  emails: [Email]
  firstName: String
  id: String
  """
  Is this an individual or business customer
  """
  individual: Boolean
  lastName: String
  middleName: String
  """
  Some notes about this customer
  """
  notes: String
  phoneNumbers: [PhoneNumber]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  suffix: String
  taxNumber: String
  taxRate: LinkedTaxRate
  title: String
  updatedAt: String
  updatedBy: String
  websites: [Website]
}

type CustomerList {
  data: [Customer]!
  """
  Response metadata
  """
  meta: Meta
}

input CustomersFilterInput {
  """
  Company Name of customer to search for
  """
  companyName: String
  """
  Display Name of customer to search for
  """
  displayName: String
  """
  Email of customer to search for
  """
  email: String
  """
  First name of customer to search for
  """
  firstName: String
  """
  Last name of customer to search for
  """
  lastName: String
}

type Invoice {
  """
  Balance of invoice due.
  """
  balance: Float
  billingAddress: Address
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomer
  """
  Customer memo
  """
  customerMemo: String
  """
  Amount of deposit made to this invoice.
  """
  deposit: Float
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
  """
  dueDate: String
  id: String
  """
  Date invoice was issued - YYYY-MM-DD.
  """
  invoiceDate: String
  """
  Invoice sent to contact/customer.
  """
  invoiceSent: Boolean
  lineItems: [InvoiceLineItem]
  """
  Invoice number.
  """
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  """
  Optional invoice reference.
  """
  reference: String
  rowVersion: String
  shippingAddress: Address
  """
  URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
  """
  sourceDocumentUrl: String
  """
  Invoice status
  """
  status: Status
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Optional invoice template
  """
  templateId: String
  """
  Terms of payment.
  """
  terms: String
  """
  Total amount of invoice, including tax.
  """
  total: Float
  """
  Total tax amount applied to this invoice.
  """
  totalTax: Float
  """
  Invoice type
  """
  type: InvoiceType
  updatedAt: String
  updatedBy: String
}

enum InvoiceType {
  standard
  credit
  service
  product
  supplier
  other
}

type InvoiceItem {
  active: Boolean
  assetAccount: LinkedLedgerAccount
  """
  User defined item code
  """
  code: String
  createdAt: String
  createdBy: String
  """
  A short description of the item
  """
  description: String
  expenseAccount: LinkedLedgerAccount
  """
  The ID of the item.
  """
  id: String
  incomeAccount: LinkedLedgerAccount
  """
  The date of opening balance if inventory item is tracked - YYYY-MM-DD.
  """
  inventoryDate: String
  """
  Item name
  """
  name: String
  purchaseDetails: PurchaseDetails
  """
  Item is available for purchase transactions
  """
  purchased: Boolean
  quantity: Float
  rowVersion: String
  salesDetails: SalesDetails
  """
  Item will be available on sales transactions
  """
  sold: Boolean
  """
  Item is inventoried
  """
  tracked: Boolean
  """
  Item type
  """
  type: InvoiceItemType
  unitPrice: Float
  updatedAt: String
  updatedBy: String
}

type PurchaseDetails {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRate
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type SalesDetails {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRate
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

enum InvoiceItemType {
  inventory
  service
  other
}

type InvoiceItemList {
  data: [InvoiceItem]!
  """
  Response metadata
  """
  meta: Meta
}

input InvoiceItemsFilterInput {
  """
  Name of Invoice Items to search for
  """
  name: String
}

type InvoiceList {
  data: [Invoice]!
  """
  Response metadata
  """
  meta: Meta
}

input InvoicesSortInput {
  """
  The field on which to sort the Invoices
  """
  by: InvoicesSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum InvoicesSortBy {
  updated_at
}

enum SortDirection {
  asc
  desc
}

type LedgerAccount {
  """
  Whether the account is active or not.
  """
  active: Boolean
  bankAccount: BankAccount
  """
  The categories of the account.
  """
  categories: [CategoriesListItem]
  """
  The classification of account.
  """
  classification: Classification
  """
  The code assigned to the account.
  """
  code: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The current balance of the account.
  """
  currentBalance: Float
  """
  The description of the account.
  """
  description: String
  """
  The human readable display ID used when displaying the account
  """
  displayId: String
  """
  The fully qualified name of the account.
  """
  fullyQualifiedName: String
  """
  Whether the account is a header or not.
  """
  header: Boolean
  id: String
  """
  Reconciliation Date means the last calendar day of each Reconciliation Period.
  """
  lastReconciliationDate: String
  level: Float
  """
  The name of the account.
  """
  name: String
  """
  The nominal code of the ledger account.
  """
  nominalCode: String
  """
  The opening balance of the account.
  """
  openingBalance: Float
  parentAccount: ParentAccount
  rowVersion: String
  """
  The status of the account.
  """
  status: LedgerAccountStatus
  """
  Whether the account is a sub account or not.
  """
  subAccount: Boolean
  """
  The sub accounts of the account.
  """
  subAccounts: [SubAccountsListItem]
  """
  The sub type of account.
  """
  subType: String
  taxRate: LinkedTaxRate
  """
  The tax type of the account.
  """
  taxType: String
  """
  The type of account.
  """
  type: LedgerAccountType
  updatedAt: String
  updatedBy: String
}

type CategoriesListItem {
  id: String
  """
  The name of the category.
  """
  name: String
}

enum Classification {
  asset
  equity
  expense
  liability
  revenue
  income
  other_income
  other_expense
  costs_of_sales
}

type ParentAccount {
  """
  The human readable display ID used when displaying the parent account
  """
  displayId: String
  """
  The ID of the parent account.
  """
  id: String
  """
  The name of the parent account.
  """
  name: String
}

enum LedgerAccountStatus {
  active
  inactive
  archived
}

type SubAccountsListItem {
  """
  The name of the sub account.
  """
  accountSubName: String
  """
  The ID of the sub account.
  """
  id: String
}

enum LedgerAccountType {
  accounts_receivable
  revenue
  sales
  other_income
  bank
  current_asset
  fixed_asset
  non_current_asset
  other_asset
  balancesheet
  equity
  expense
  other_expense
  costs_of_sales
  accounts_payable
  credit_card
  current_liability
  non_current_liability
  other_liability
}

type LedgerAccountList {
  data: [LedgerAccount]!
  """
  Response metadata
  """
  meta: Meta
}

type ProfitAndLoss {
  currency: String!
  """
  Customer id
  """
  customerId: String
  """
  The start date of the report
  """
  endDate: String
  expenses: Expenses!
  grossProfit: GrossProfit
  id: String
  income: Income!
  netIncome: NetIncome
  netOperatingIncome: NetOperatingIncome
  """
  The name of the report
  """
  reportName: String!
  """
  The start date of the report
  """
  startDate: String
}

type Expenses {
  records: [ProfitAndLossRecordsListItem]!
  """
  Total expense
  """
  total: Float!
}

type ProfitAndLossRecordsListItem {
  id: String
  records: [RecordsListItem]
  title: String
  total: Float
  type: JSON
  value: Float
}

type RecordsListItem {
  id: String
  records: [RecordsListItem]
  title: String
  total: Float
  type: JSON
  value: Float
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type GrossProfit {
  records: [ProfitAndLossRecordsListItem]!
  """
  Total gross profit
  """
  total: Float!
}

type Income {
  records: [ProfitAndLossRecordsListItem]!
  """
  Total income
  """
  total: Float!
}

type NetIncome {
  records: [ProfitAndLossRecordsListItem]!
  """
  Total net income
  """
  total: Float!
}

type NetOperatingIncome {
  records: [ProfitAndLossRecordsListItem]!
  """
  Total net operating income
  """
  total: Float!
}

input ProfitAndLossFilterInput {
  """
  Filter by customer id
  """
  customerId: String
  """
  Filter by end date. If end date is given, start date is required.
  """
  endDate: String
  """
  Filter by start date. If start date is given, end date is required.
  """
  startDate: String
}

type TaxRate {
  """
  Tax code assigned to identify this tax rate.
  """
  code: String
  components: [ComponentsListItem]
  createdAt: String
  createdBy: String
  """
  Description of tax rate
  """
  description: String
  """
  Effective tax rate
  """
  effectiveTaxRate: Float
  """
  ID assigned to identify this tax rate.
  """
  id: String
  """
  Name assigned to identify this tax rate.
  """
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  """
  Report Tax type to aggregate tax collected or paid for reporting purposes
  """
  reportTaxType: String
  rowVersion: String
  """
  Tax rate status
  """
  status: TaxRateStatus
  """
  Unique identifier for the account for tax collected.
  """
  taxPayableAccountId: String
  """
  Unique identifier for the account for tax remitted.
  """
  taxRemittedAccountId: String
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
  """
  Tax type used to indicate the source of tax collected or paid
  """
  type: String
  updatedAt: String
  updatedBy: String
}

type ComponentsListItem {
  compound: Boolean
  id: String
  name: String
  rate: Float
}

enum TaxRateStatus {
  active
  inactive
  archived
}

type TaxRateList {
  data: [TaxRate]!
  """
  Response metadata
  """
  meta: Meta
}

input TaxRatesFilterInput {
  """
  Boolean to describe if tax rate can be used for asset accounts
  """
  assets: Boolean
  """
  Boolean to describe if tax rate can be used for equity accounts
  """
  equity: Boolean
  """
  Boolean to describe if tax rate can be used for expense accounts
  """
  expenses: Boolean
  """
  Boolean to describe if tax rate can be used for liability accounts
  """
  liabilities: Boolean
  """
  Boolean to describe if tax rate can be used for revenue accounts
  """
  revenue: Boolean
}

type MutationAccounting {
  """
  Create Bill
  """
  billsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: BillInput!
  ): UnifiedId
  """
  Delete Bill
  """
  billsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Bill
  """
  billsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: BillInput!
  ): UnifiedId
  """
  Create Credit Note
  """
  creditNotesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CreditNoteInput!
  ): UnifiedId
  """
  Delete Credit Note
  """
  creditNotesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Credit Note
  """
  creditNotesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CreditNoteInput!
  ): UnifiedId
  """
  Create Customer
  """
  customersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerInput!
  ): UnifiedId
  """
  Delete Customer
  """
  customersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Customer
  """
  customersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerInput!
  ): UnifiedId
  """
  Create Invoice Item
  """
  invoiceItemsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceItemInput!
  ): UnifiedId
  """
  Delete Invoice Item
  """
  invoiceItemsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Invoice Item
  """
  invoiceItemsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceItemInput!
  ): UnifiedId
  """
  Create Invoice
  """
  invoicesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): InvoiceResponse
  """
  Delete Invoice
  """
  invoicesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): InvoiceResponse
  """
  Update Invoice
  """
  invoicesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: InvoiceInput!
  ): InvoiceResponse
  """
  Create Ledger Account
  """
  ledgerAccountsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Delete Ledger Account
  """
  ledgerAccountsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Ledger Account
  """
  ledgerAccountsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LedgerAccountInput!
  ): UnifiedId
  """
  Create Payment
  """
  paymentsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PaymentInput!
  ): UnifiedId
  """
  Delete Payment
  """
  paymentsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Payment
  """
  paymentsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PaymentInput!
  ): UnifiedId
  """
  Create Supplier
  """
  suppliersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: SupplierInput!
  ): UnifiedId
  """
  Delete Supplier
  """
  suppliersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Supplier
  """
  suppliersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: SupplierInput!
  ): UnifiedId
  """
  Create Tax Rate
  """
  taxRatesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
  """
  Delete Tax Rate
  """
  taxRatesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Tax Rate
  """
  taxRatesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TaxRateInput!
  ): UnifiedId
}

type UnifiedId {
  id: String!
}

input BillInput {
  """
  Balance of bill due.
  """
  balance: Float
  """
  Date bill was issued - YYYY-MM-DD.
  """
  billDate: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  Amount of deposit made to this bill.
  """
  deposit: Float
  """
  The due date is the date on which a payment is scheduled to be received by the supplier - YYYY-MM-DD.
  """
  dueDate: String
  ledgerAccount: LinkedLedgerAccountInput
  lineItems: [BillLineItemInput]
  notes: String
  """
  The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
  """
  paidDate: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  """
  Optional invoice reference.
  """
  reference: String
  rowVersion: String
  """
  Invoice status
  """
  status: Status
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  The supplier this entity is linked to.
  """
  supplier: LinkedSupplierInput
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Terms of payment.
  """
  terms: String
  """
  Total amount of bill, including tax.
  """
  total: Float
  """
  Total tax amount applied to this bill.
  """
  totalTax: Float
}

input LinkedLedgerAccountInput {
  """
  The code assigned to the account.
  """
  code: String
  """
  The unique identifier for the account.
  """
  id: String
  """
  The nominal code of the account.
  """
  nominalCode: String
}

input BillLineItemInput {
  """
  User defined item code
  """
  code: String
  """
  User defined description
  """
  description: String
  """
  Discount percentage
  """
  discountPercentage: Float
  item: LinkedInvoiceItemInput
  ledgerAccount: LinkedLedgerAccountInput
  """
  Line number in the invoice
  """
  lineNumber: Int
  quantity: Float
  """
  Row ID
  """
  rowId: String
  rowVersion: String
  """
  Tax amount
  """
  taxAmount: Float
  taxRate: LinkedTaxRateInput
  """
  Total amount of the line item
  """
  totalAmount: Float
  """
  Bill Line Item type
  """
  type: BillLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

input LinkedInvoiceItemInput {
  """
  ID of the linked item. A reference to the [invoice item](https://developers.apideck.com/apis/accounting/reference#tag/Invoice-Items) that was used to create this line item
  """
  id: String
}

input LinkedTaxRateInput {
  """
  The ID of the object.
  """
  id: String
}

"""
The supplier this entity is linked to.
"""
input LinkedSupplierInput {
  address: AddressInput
  """
  The display name of the supplier.
  """
  displayName: String
  """
  The ID of the supplier this entity is linked to.
  """
  id: String!
}

input AddressInput {
  """
  Name of city.
  """
  city: String
  contactName: String
  """
  country code according to ISO 3166-1 alpha-2.
  """
  country: String
  """
  Address field that holds a sublocality, such as a county
  """
  county: String
  email: String
  fax: String
  id: String
  latitude: String
  """
  Line 1 of the address e.g. number, street, suite, apt #, etc.
  """
  line1: String
  """
  Line 2 of the address
  """
  line2: String
  """
  Line 3 of the address
  """
  line3: String
  """
  Line 4 of the address
  """
  line4: String
  longitude: String
  name: String
  phoneNumber: String
  """
  Zip code or equivalent.
  """
  postalCode: String
  rowVersion: String
  salutation: String
  """
  Name of state
  """
  state: String
  """
  Street number
  """
  streetNumber: String
  string: String
  type: AddressType
  website: String
}

input CreditNoteInput {
  allocations: [AllocationsListItemInput]
  """
  The balance reflecting any payments made against the transaction.
  """
  balance: Float
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomerInput
  """
  Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
  """
  dateIssued: String
  """
  Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
  """
  datePaid: String
  lineItems: [InvoiceLineItemInput]
  """
  Optional note to be associated with the credit note.
  """
  note: String
  """
  Credit note number.
  """
  number: String
  """
  Optional reference message ie: Debit remittance detail.
  """
  reference: String
  """
  Indicates the total credit amount still available to apply towards the payment.
  """
  remainingCredit: Float
  rowVersion: String
  """
  Status of payment
  """
  status: CreditNoteStatus
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Amount of transaction
  """
  totalAmount: Float!
  """
  Total tax amount applied to this invoice.
  """
  totalTax: Float
  """
  Type of payment
  """
  type: CreditNoteType
}

input AllocationsListItemInput {
  """
  Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
  """
  amount: Float
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  """
  Type of entity this payment should be attributed to.
  """
  type: AllocationType
}

"""
The customer this entity is linked to.
"""
input LinkedCustomerInput {
  """
  The display name of the customer.
  """
  displayName: String
  """
  The ID of the customer this entity is linked to.
  """
  id: String!
}

input InvoiceLineItemInput {
  """
  User defined item code
  """
  code: String
  """
  User defined description
  """
  description: String
  """
  Discount percentage
  """
  discountPercentage: Float
  item: LinkedInvoiceItemInput
  ledgerAccount: LinkedLedgerAccountInput
  """
  Line number in the invoice
  """
  lineNumber: Int
  quantity: Float
  """
  Row ID
  """
  rowId: String
  rowVersion: String
  """
  Tax amount
  """
  taxAmount: Float
  taxRate: LinkedTaxRateInput
  """
  Total amount of the line item
  """
  totalAmount: Float
  """
  Item type
  """
  type: InvoiceLineItemType
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

input CustomerInput {
  addresses: [AddressInput]
  bankAccounts: [BankAccountInput]
  companyName: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Display ID
  """
  displayId: String
  """
  Display Name
  """
  displayName: String
  emails: [EmailInput]
  firstName: String
  """
  Is this an individual or business customer
  """
  individual: Boolean
  lastName: String
  middleName: String
  """
  Some notes about this customer
  """
  notes: String
  phoneNumbers: [PhoneNumberInput]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  suffix: String
  taxNumber: String
  taxRate: LinkedTaxRateInput
  title: String
  websites: [WebsiteInput]
}

input BankAccountInput {
  """
  The name which you used in opening your bank account.
  """
  accountName: String
  """
  A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
  """
  accountNumber: String
  """
  The type of bank account.
  """
  accountType: AccountType
  """
  A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
  """
  bankCode: String
  bic: String
  """
  A branch identifier is a unique identifier for a branch of a bank or financial institution.
  """
  branchIdentifier: String
  """
  A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
  """
  bsbNumber: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  iban: String
}

input EmailInput {
  email: String!
  id: String
  type: EmailType
}

input PhoneNumberInput {
  areaCode: String
  countryCode: String
  extension: String
  id: String
  number: String!
  type: PhoneType
}

input WebsiteInput {
  id: String
  type: WebsiteType
  url: String!
}

input InvoiceItemInput {
  active: Boolean
  assetAccount: LinkedLedgerAccountInput
  """
  User defined item code
  """
  code: String
  """
  A short description of the item
  """
  description: String
  expenseAccount: LinkedLedgerAccountInput
  incomeAccount: LinkedLedgerAccountInput
  """
  The date of opening balance if inventory item is tracked - YYYY-MM-DD.
  """
  inventoryDate: String
  """
  Item name
  """
  name: String
  purchaseDetails: PurchaseDetailsInput
  """
  Item is available for purchase transactions
  """
  purchased: Boolean
  quantity: Float
  rowVersion: String
  salesDetails: SalesDetailsInput
  """
  Item will be available on sales transactions
  """
  sold: Boolean
  """
  Item is inventoried
  """
  tracked: Boolean
  """
  Item type
  """
  type: InvoiceItemType
  unitPrice: Float
}

input PurchaseDetailsInput {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRateInput
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

input SalesDetailsInput {
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  taxRate: LinkedTaxRateInput
  """
  Description of the unit type the item is sold as, ie: kg, hour.
  """
  unitOfMeasure: String
  unitPrice: Float
}

type InvoiceResponse {
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  id: String
}

input InvoiceInput {
  """
  Balance of invoice due.
  """
  balance: Float
  billingAddress: AddressInput
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomerInput
  """
  Customer memo
  """
  customerMemo: String
  """
  Amount of deposit made to this invoice.
  """
  deposit: Float
  """
  The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
  """
  dueDate: String
  """
  Date invoice was issued - YYYY-MM-DD.
  """
  invoiceDate: String
  """
  Invoice sent to contact/customer.
  """
  invoiceSent: Boolean
  lineItems: [InvoiceLineItemInput]
  """
  Invoice number.
  """
  number: String
  """
  A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
  """
  poNumber: String
  """
  Optional invoice reference.
  """
  reference: String
  rowVersion: String
  shippingAddress: AddressInput
  """
  URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
  """
  sourceDocumentUrl: String
  """
  Invoice status
  """
  status: Status
  """
  Sub-total amount, normally before tax.
  """
  subTotal: Float
  """
  Applicable tax id/code override if tax is not supplied on a line item basis.
  """
  taxCode: String
  """
  Amounts are including tax
  """
  taxInclusive: Boolean
  """
  Optional invoice template
  """
  templateId: String
  """
  Terms of payment.
  """
  terms: String
  """
  Total amount of invoice, including tax.
  """
  total: Float
  """
  Total tax amount applied to this invoice.
  """
  totalTax: Float
  """
  Invoice type
  """
  type: InvoiceType
}

input LedgerAccountInput {
  """
  Whether the account is active or not.
  """
  active: Boolean
  bankAccount: BankAccountInput
  """
  The classification of account.
  """
  classification: Classification
  """
  The code assigned to the account.
  """
  code: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The current balance of the account.
  """
  currentBalance: Float
  """
  The description of the account.
  """
  description: String
  """
  The human readable display ID used when displaying the account
  """
  displayId: String
  """
  The fully qualified name of the account.
  """
  fullyQualifiedName: String
  """
  Whether the account is a header or not.
  """
  header: Boolean
  """
  Reconciliation Date means the last calendar day of each Reconciliation Period.
  """
  lastReconciliationDate: String
  level: Float
  """
  The name of the account.
  """
  name: String
  """
  The nominal code of the ledger account.
  """
  nominalCode: String
  """
  The opening balance of the account.
  """
  openingBalance: Float
  parentAccount: ParentAccountInput
  rowVersion: String
  """
  The status of the account.
  """
  status: LedgerAccountStatus
  """
  Whether the account is a sub account or not.
  """
  subAccount: Boolean
  """
  The sub type of account.
  """
  subType: String
  taxRate: LinkedTaxRateInput
  """
  The tax type of the account.
  """
  taxType: String
  """
  The type of account.
  """
  type: LedgerAccountType
}

input ParentAccountInput {
  """
  The human readable display ID used when displaying the parent account
  """
  displayId: String
  """
  The ID of the parent account.
  """
  id: String
  """
  The name of the parent account.
  """
  name: String
}

input PaymentInput {
  account: LinkedLedgerAccountInput
  """
  Unique identifier for the account to allocate payment to.
  """
  accountsReceivableAccountId: String
  """
  Type of accounts receivable account.
  """
  accountsReceivableAccountType: String
  allocations: [PaymentAllocationInput]
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Currency Exchange Rate at the time entity was recorded/generated.
  """
  currencyRate: Float
  """
  The customer this entity is linked to.
  """
  customer: LinkedCustomerInput
  """
  Optional note to be associated with the payment.
  """
  note: String
  """
  Payment method
  """
  paymentMethod: String
  """
  Optional reference message returned by payment method on processing
  """
  paymentMethodReference: String
  """
  Payment has been reconciled
  """
  reconciled: Boolean
  """
  Optional payment reference message ie: Debit remittance detail.
  """
  reference: String
  rowVersion: String
  """
  Status of payment
  """
  status: PaymentStatus
  """
  Amount of payment
  """
  totalAmount: Float!
  """
  Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
  """
  transactionDate: String!
  """
  Type of payment
  """
  type: PaymentType
}

input PaymentAllocationInput {
  """
  Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
  """
  amount: Float
  """
  Unique identifier of entity this payment should be attributed to.
  """
  id: String
  """
  Type of entity this payment should be attributed to.
  """
  type: AllocationType
}

input SupplierInput {
  account: LinkedLedgerAccountInput
  addresses: [AddressInput]
  bankAccounts: [BankAccountInput]
  companyName: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Display name of supplier.
  """
  displayName: String
  emails: [EmailInput]
  firstName: String
  lastName: String
  middleName: String
  notes: String
  phoneNumbers: [PhoneNumberInput]
  rowVersion: String
  """
  Customer status
  """
  status: CustomerStatus
  suffix: String
  taxNumber: String
  taxRate: LinkedTaxRateInput
  title: String
  websites: [WebsiteInput]
}

input TaxRateInput {
  """
  Tax code assigned to identify this tax rate.
  """
  code: String
  components: [ComponentsListItemInput]
  """
  Description of tax rate
  """
  description: String
  """
  Effective tax rate
  """
  effectiveTaxRate: Float
  """
  ID assigned to identify this tax rate.
  """
  id: String
  """
  Name assigned to identify this tax rate.
  """
  name: String
  """
  ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
  """
  originalTaxRateId: String
  """
  Report Tax type to aggregate tax collected or paid for reporting purposes
  """
  reportTaxType: String
  rowVersion: String
  """
  Tax rate status
  """
  status: TaxRateStatus
  """
  Unique identifier for the account for tax collected.
  """
  taxPayableAccountId: String
  """
  Unique identifier for the account for tax remitted.
  """
  taxRemittedAccountId: String
  """
  Not compounded sum of the components of a tax rate
  """
  totalTaxRate: Float
  """
  Tax type used to indicate the source of tax collected or paid
  """
  type: String
}

input ComponentsListItemInput {
  compound: Boolean
  id: String
  name: String
  rate: Float
}

type Ats {
  """
  Get applicant
  """
  applicant(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Applicant
  """
  List applicants
  """
  applicants(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: JobsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ApplicantList
  """
  Get Job
  """
  job(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Job
  """
  List Jobs
  """
  jobs(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): JobList
}

type Applicant {
  addresses: [Address]
  anonymized: Boolean
  applications: [String]
  archived: Boolean
  birthday: String
  confidential: Boolean
  coordinatorId: String
  coverLetter: String
  createdAt: String
  cvUrl: String
  deleted: Boolean
  deletedAt: String
  deletedBy: String
  emails: [Email]
  firstName: String
  followers: [String]
  """
  Typically a list of previous companies where the contact has worked or schools that the contact has attended
  """
  headline: String
  id: String
  initials: String
  jobUrl: String
  lastInteractionAt: String
  lastName: String
  middleName: String
  """
  The name of an applicant.
  """
  name: String
  ownerId: String
  phoneNumbers: [PhoneNumber]
  photoUrl: String
  """
  The PositionId the applicant applied for.
  """
  positionId: String
  recordUrl: String
  recruiterId: String
  rejectedAt: String
  socialLinks: [SocialLinksListItem]
  sourceId: String
  sourcedBy: String
  sources: [String]
  stageId: String
  tags: [String]
  title: String
  updatedAt: String
  websites: [WebsitesListItem]
}

type SocialLinksListItem {
  id: String
  type: String
  url: String!
}

type WebsitesListItem {
  id: String
  type: WebsiteType
  url: String!
}

type ApplicantList {
  data: [Applicant]!
  """
  Response metadata
  """
  meta: Meta
}

input JobsFilterInput {
  """
  Id of the job to filter on
  """
  jobId: String
}

type Job {
  addresses: [Address]
  """
  Specifies whether an employee of the organization can apply for the job.
  """
  availableToEmployees: Boolean
  blocks: [BlocksListItem]
  """
  Details of the branch for which the job is created.
  """
  branch: Branch
  closing: String
  closingDate: String
  """
  The closing section of the job description in HTML format
  """
  closingHtml: String
  """
  The code of the job.
  """
  code: String
  confidential: Boolean
  createdAt: String
  createdBy: String
  deleted: Boolean
  department: Department
  description: String
  """
  The job description in HTML format
  """
  descriptionHtml: String
  employmentTerms: EmploymentTerms
  """
  Level of experience required for the job role.
  """
  experience: String
  followers: [String]
  hiringManagers: [HiringManagersListItem]
  id: String
  """
  URL of the job portal
  """
  jobPortalUrl: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  ownerId: String
  publishedAt: String
  recordUrl: String
  """
  The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
  """
  recruiters: [String]
  """
  Specifies whether the posting is for a remote job.
  """
  remote: Boolean
  """
  A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
  """
  requisitionId: String
  salary: Salary
  """
  Sequence in relation to other jobs.
  """
  sequence: Int
  slug: String
  """
  The status of the job.
  """
  status: JobStatus
  tags: [String]
  title: String
  updatedAt: String
  updatedBy: String
  """
  URL of the job description
  """
  url: String
  visibility: [VisibilityListItem]
}

type BlocksListItem {
  content: String
  title: String
}

"""
Details of the branch for which the job is created.
"""
type Branch {
  id: String
  """
  Name of the branch.
  """
  name: String
}

type Department {
  code: String
  createdAt: String
  createdBy: String
  description: String
  id: String
  """
  Department name
  """
  name: String
  updatedAt: String
  updatedBy: String
}

enum EmploymentTerms {
  fulltime
  parttime
  intership
  contractor
  employee
  freelance
  temp
  seasonal
  volunteer
  other
}

type HiringManagersListItem {
  id: String
}

type Salary {
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  Maximum salary payable for the job role.
  """
  max: Int
  """
  Minimum salary payable for the job role.
  """
  min: Int
}

enum JobStatus {
  draft
  internal
  published
  completed
  onhold
  private
}

enum VisibilityListItem {
  public
  internal
}

type JobList {
  data: [Job]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationAts {
  """
  Create applicant
  """
  applicantsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ApplicantInput!
  ): UnifiedId
}

input ApplicantInput {
  addresses: [AddressInput]
  anonymized: Boolean
  applications: [String]
  archived: Boolean
  birthday: String
  confidential: Boolean
  coordinatorId: String
  coverLetter: String
  deleted: Boolean
  emails: [EmailInput]
  firstName: String
  followers: [String]
  """
  Typically a list of previous companies where the contact has worked or schools that the contact has attended
  """
  headline: String
  initials: String
  lastName: String
  middleName: String
  """
  The name of an applicant.
  """
  name: String
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  photoUrl: String
  """
  The PositionId the applicant applied for.
  """
  positionId: String
  recordUrl: String
  recruiterId: String
  socialLinks: [SocialLinksListItemInput]
  sources: [String]
  stageId: String
  tags: [String]
  title: String
  websites: [WebsitesListItemInput]
}

input SocialLinksListItemInput {
  id: String
  type: String
  url: String!
}

input WebsitesListItemInput {
  id: String
  type: WebsiteType
  url: String!
}

type Crm {
  """
  List activities
  """
  activities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): ActivityList
  """
  Get activity
  """
  activity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Activity
  """
  List companies
  """
  companies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: CompaniesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: CompaniesSortInput
  ): CompanyList
  """
  Get company
  """
  company(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Company
  """
  Get contact
  """
  contact(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Contact
  """
  List contacts
  """
  contacts(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: ContactsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: ContactsSortInput
  ): ContactList
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: LeadsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: LeadsSortInput
  ): LeadList
  """
  Get note
  """
  note(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Note
  """
  List notes
  """
  notes(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): NoteList
  """
  List opportunities
  """
  opportunities(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: OpportunitiesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: OpportunitiesSortInput
  ): OpportunityList
  """
  Get opportunity
  """
  opportunity(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Opportunity
  """
  Get pipeline
  """
  pipeline(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Pipeline
  """
  List pipelines
  """
  pipelines(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): PipelinesList
  """
  Get user
  """
  user(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): User
  """
  List users
  """
  users(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UserList
}

type ActivityList {
  data: [Activity]!
  """
  Response metadata
  """
  meta: Meta
}

type Activity {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  attendees: [ActivityAttendee]
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  createdAt: String
  createdBy: String
  customFields: [CustomField]
  customObjectId: String
  deleted: Boolean
  description: String
  """
  Whether the Activity is done or not
  """
  done: Boolean
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  durationMinutes: Int
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  id: String
  leadId: String
  location: String
  locationAddress: Address
  note: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: ActivityType!
  updatedAt: String
  updatedBy: String
  userId: String
  videoConferenceId: String
  videoConferenceUrl: String
}

type ActivityAttendee {
  contactId: String
  createdAt: String
  emailAddress: String
  firstName: String
  id: String
  isOrganizer: Boolean
  lastName: String
  middleName: String
  name: String
  prefix: String
  status: Status
  suffix: String
  updatedAt: String
  userId: String
}

type CustomField {
  """
  More information about the custom field
  """
  description: String
  id: String!
  """
  Name of the custom field.
  """
  name: String
  value: JSON
}

enum ShowAs {
  free
  busy
}

enum ActivityType {
  call
  meeting
  email
  note
  task
  deadline
  sendletter
  sendquote
  other
}

type CompanyList {
  data: [Company]!
  """
  Response metadata
  """
  meta: Meta
}

type Company {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [Address]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccount]
  birthday: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  deleted: Boolean
  description: String
  emails: [Email]
  fax: String
  firstName: String
  id: String
  image: String
  """
  Industry
  """
  industry: String
  interactionCount: Int
  lastActivityAt: String
  lastName: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  """
  Parent ID
  """
  parentId: String
  payeeNumber: String
  phoneNumbers: [PhoneNumber]
  readOnly: Boolean
  rowType: CompanyRowType
  salesTaxNumber: String
  salutation: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  updatedAt: String
  updatedBy: String
  """
  VAT number
  """
  vatNumber: String
  websites: [Website]
}

type CompanyRowType {
  id: String
  name: String
}

type SocialLink {
  id: String
  type: String
  url: String!
}

input CompaniesFilterInput {
  """
  Name of the company to filter on
  """
  name: String
}

input CompaniesSortInput {
  """
  The field on which to sort the Companies
  """
  by: CompaniesSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum CompaniesSortBy {
  created_at
  updated_at
  name
}

type Contact {
  active: Boolean
  addresses: [Address]
  birthday: String
  companyId: String
  companyName: String
  createdAt: String
  currentBalance: Float
  customFields: [CustomField]
  department: String
  description: String
  emails: [Email]
  fax: String
  firstCallAt: String
  firstEmailAt: String
  firstName: String
  gender: Gender
  id: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastActivityAt: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  photoUrl: String
  prefix: String
  socialLinks: [SocialLink]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  updatedAt: String
  websites: [Website]
}

enum Gender {
  male
  female
  unisex
  other
  not_specified
}

enum Type {
  text
  checkbox
  tel
  email
  url
  textarea
  select
  filteredselect
  multiselect
  datetime
  date
  time
  number
  sms
  mms
  contractor
  employee
  freelance
  temp
  intership
  other
  customer
  supplier
  personal
}

type ContactList {
  data: [Contact]!
  """
  Response metadata
  """
  meta: Meta
}

input ContactsFilterInput {
  """
  E-mail of the contact to filter on
  """
  email: String
  """
  First name of the contact to filter on
  """
  firstName: String
  """
  Last name of the contact to filter on
  """
  lastName: String
  """
  Name of the contact to filter on
  """
  name: String
}

input ContactsSortInput {
  """
  The field on which to sort the Contacts
  """
  by: ContactsSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum ContactsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

type Lead {
  addresses: [Address]
  companyId: String
  companyName: String!
  contactId: String
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  description: String
  emails: [Email]
  fax: String
  firstName: String
  id: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumber]
  prefix: String
  socialLinks: [SocialLink]
  status: String
  tags: [String]
  title: String
  updatedAt: String
  websites: [Website]
  """
  Get lead
  """
  lead(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Lead
  """
  List leads
  """
  leads(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: LeadsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: LeadsSortInput
  ): LeadList
}

type LeadList {
  data: [Lead]!
  """
  Response metadata
  """
  meta: Meta
}

input LeadsFilterInput {
  """
  E-mail of the lead to filter on
  """
  email: String
  """
  First name of the lead to filter on
  """
  firstName: String
  """
  Last name of the lead to filter on
  """
  lastName: String
  """
  Name of the lead to filter on
  """
  name: String
}

input LeadsSortInput {
  """
  The field on which to sort the Leads
  """
  by: LeadsSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum LeadsSortBy {
  created_at
  updated_at
  name
  first_name
  last_name
  email
}

type Note {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  createdAt: String
  createdBy: String
  id: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
  updatedAt: String
  updatedBy: String
}

type NoteList {
  data: [Note]!
  """
  Response metadata
  """
  meta: Meta
}

type OpportunityList {
  data: [Opportunity]!
  """
  Response metadata
  """
  meta: Meta
}

type Opportunity {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomField]
  dateLastContacted: String
  dateLeadCreated: String
  dateStageChanged: String
  deleted: Boolean
  description: String
  """
  Expected Revenue
  """
  expectedRevenue: Float
  id: String
  interactionCount: Float
  lastActivityAt: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  updatedAt: String
  updatedBy: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input OpportunitiesFilterInput {
  """
  Monetary amount to filter on
  """
  monetaryAmount: Float
  """
  Status to filter on
  """
  status: String
  """
  Title of the opportunity to filter on
  """
  title: String
  """
  Win probability to filter on
  """
  winProbability: Float
}

input OpportunitiesSortInput {
  """
  The field on which to sort the Opportunities
  """
  by: OpportunitiesSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum OpportunitiesSortBy {
  created_at
  updated_at
  title
  win_probability
  monetary_amount
  status
}

type Pipeline {
  archived: Boolean
  createdAt: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItem]
  updatedAt: String
}

type StagesListItem {
  displayOrder: Int
  id: String
  name: String
  value: String
  """
  The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
  """
  winProbability: Int
}

type PipelinesList {
  data: [Pipeline]!
  """
  Response metadata
  """
  meta: Meta
}

type User {
  addresses: [Address]
  companyName: String
  createdAt: String
  """
  The department the user is currently in.
  """
  department: String
  description: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [Email]!
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  firstName: String
  id: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  parentId: String
  phoneNumbers: [PhoneNumber]
  status: String
  title: String
  updatedAt: String
  username: String
}

type UserList {
  data: [User]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationCrm {
  """
  Create activity
  """
  activitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Delete activity
  """
  activitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update activity
  """
  activitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ActivityInput!
  ): UnifiedId
  """
  Create company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Delete company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CompanyInput!
  ): UnifiedId
  """
  Create contact
  """
  contactsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Delete contact
  """
  contactsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update contact
  """
  contactsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: ContactInput!
  ): UnifiedId
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Create note
  """
  notesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Delete note
  """
  notesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update note
  """
  notesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: NoteInput!
  ): UnifiedId
  """
  Create opportunity
  """
  opportunitiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Delete opportunity
  """
  opportunitiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update opportunity
  """
  opportunitiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: OpportunityInput!
  ): UnifiedId
  """
  Create pipeline
  """
  pipelinesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Delete pipeline
  """
  pipelinesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update pipeline
  """
  pipelinesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: PipelineInput!
  ): UnifiedId
  """
  Create user
  """
  usersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
  """
  Delete user
  """
  usersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update user
  """
  usersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UserInput!
  ): UnifiedId
}

input ActivityInput {
  accountId: String
  activityDate: String
  activityDatetime: String
  allDayEvent: Boolean
  archived: Boolean
  assetId: String
  attendees: [ActivityAttendeeInput]
  campaignId: String
  caseId: String
  child: Boolean
  companyId: String
  contactId: String
  contractId: String
  customFields: [CustomFieldInput]
  customObjectId: String
  deleted: Boolean
  description: String
  """
  Whether the Activity is done or not
  """
  done: Boolean
  durationSeconds: Int
  endDate: String
  endDatetime: String
  eventSubType: String
  groupEvent: Boolean
  groupEventType: String
  leadId: String
  location: String
  locationAddress: AddressInput
  note: String
  opportunityId: String
  ownerId: String
  private: Boolean
  productId: String
  recurrent: Boolean
  reminderDatetime: String
  reminderSet: Boolean
  showAs: ShowAs
  solutionId: String
  startDatetime: String
  title: String
  type: ActivityType!
  userId: String
  videoConferenceId: String
  videoConferenceUrl: String
}

input ActivityAttendeeInput {
  emailAddress: String
  firstName: String
  isOrganizer: Boolean
  lastName: String
  middleName: String
  name: String
  prefix: String
  status: Status
  suffix: String
}

input CustomFieldInput {
  """
  More information about the custom field
  """
  description: String
  id: String!
  """
  Name of the custom field.
  """
  name: String
  value: JSON
}

input CompanyInput {
  """
  An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
  """
  abnBranch: String
  """
  An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
  """
  abnOrTfn: String
  """
  The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
  """
  acn: String
  addresses: [AddressInput]
  """
  Annual revenue
  """
  annualRevenue: String
  bankAccounts: [BankAccountInput]
  birthday: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  image: String
  """
  Industry
  """
  industry: String
  lastName: String
  name: String!
  """
  Number of employees
  """
  numberOfEmployees: String
  ownerId: String
  """
  Ownership
  """
  ownership: String
  payeeNumber: String
  phoneNumbers: [PhoneNumberInput]
  readOnly: Boolean
  rowType: CompanyRowTypeInput
  salesTaxNumber: String
  salutation: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  """
  VAT number
  """
  vatNumber: String
  websites: [WebsiteInput]
}

input CompanyRowTypeInput {
  id: String
  name: String
}

input SocialLinkInput {
  id: String
  type: String
  url: String!
}

input ContactInput {
  active: Boolean
  addresses: [AddressInput]
  birthday: String
  companyId: String
  companyName: String
  currentBalance: Float
  customFields: [CustomFieldInput]
  department: String
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  gender: Gender
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadId: String
  leadSource: String
  middleName: String
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  photoUrl: String
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  suffix: String
  tags: [String]
  title: String
  type: Type
  websites: [WebsiteInput]
}

input LeadInput {
  addresses: [AddressInput]
  companyId: String
  companyName: String!
  contactId: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  emails: [EmailInput]
  fax: String
  firstName: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  leadSource: String
  monetaryAmount: Float
  name: String!
  ownerId: String
  phoneNumbers: [PhoneNumberInput]
  prefix: String
  socialLinks: [SocialLinkInput]
  status: String
  tags: [String]
  title: String
  websites: [WebsiteInput]
}

input NoteInput {
  active: Boolean
  companyId: String
  contactId: String
  content: String
  leadId: String
  opportunityId: String
  ownerId: String
  title: String
}

input OpportunityInput {
  closeDate: String
  companyId: String
  companyName: String
  contactId: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  customFields: [CustomFieldInput]
  description: String
  leadId: String
  """
  Lead source
  """
  leadSource: String
  lossReason: String
  lossReasonId: String
  monetaryAmount: Float
  ownerId: String
  pipelineId: String
  pipelineStageId: String
  primaryContactId: String!
  priority: String
  sourceId: String
  stageLastChangedAt: String
  status: String
  statusId: String
  tags: [String]
  title: String!
  type: String
  winProbability: Float
  wonReason: String
  wonReasonId: String
}

input PipelineInput {
  archived: Boolean
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  displayOrder: Int
  id: String
  name: String!
  stages: [StagesListItemInput]
}

input StagesListItemInput {
  displayOrder: Int
  name: String
  value: String
  """
  The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
  """
  winProbability: Int
}

input UserInput {
  addresses: [AddressInput]
  companyName: String
  """
  The department the user is currently in.
  """
  department: String
  description: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [EmailInput]!
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  firstName: String
  image: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  language: String
  lastName: String
  parentId: String
  password: String
  phoneNumbers: [PhoneNumberInput]
  status: String
  title: String
  username: String
}

type CustomerSupport {
  """
  Get Customer Support Customer
  """
  customerSupportCustomer(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerSupportCustomer
  """
  List Customer Support Customers
  """
  customerSupportCustomers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): CustomerSupportCustomerList
}

type CustomerSupportCustomer {
  addresses: [Address]
  bankAccounts: BankAccount
  companyName: String
  createdAt: String
  createdBy: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  emails: [Email]
  firstName: String
  id: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumber]
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
  updatedAt: String
  updatedBy: String
}

type CustomerSupportCustomerList {
  data: [CustomerSupportCustomer]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationCustomerSupport {
  """
  Create Customer Support Customer
  """
  customersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerSupportCustomerInput!
  ): UnifiedId
  """
  Delete Customer Support Customer
  """
  customersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Customer Support Customer
  """
  customersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CustomerSupportCustomerInput!
  ): UnifiedId
}

input CustomerSupportCustomerInput {
  addresses: [AddressInput]
  bankAccounts: BankAccountInput
  companyName: String
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  emails: [EmailInput]
  firstName: String
  individual: Boolean
  lastName: String
  notes: String
  phoneNumbers: [PhoneNumberInput]
  """
  Customer status
  """
  status: CustomerStatus
  taxNumber: String
}

type FileStorage {
  """
  Get Drive
  """
  drive(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Drive
  """
  Get DriveGroup
  """
  driveGroup(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): DriveGroup
  """
  List DriveGroups
  """
  driveGroups(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: DriveGroupsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): DriveGroupList
  """
  List Drives
  """
  drives(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: DrivesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): DriveList
  """
  List Files
  """
  files(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: FilesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    """
    Apply sorting
    """
    sort: FilesSortInput
  ): FileList
  """
  Get Folder
  """
  folder(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Folder
  """
  Get Shared Link
  """
  sharedLink(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): SharedLink
  """
  List SharedLinks
  """
  sharedLinks(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): SharedLinkList
  """
  Get File
  """
  unifiedFile(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedFile
  """
  Get Upload Session
  """
  uploadSession(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UploadSession
}

type Drive {
  createdAt: String
  createdBy: String
  description: String
  id: String!
  """
  The name of the drive
  """
  name: String!
  updatedAt: String
  updatedBy: String
}

type DriveGroup {
  createdAt: String
  createdBy: String
  description: String
  """
  The display name of the drive group
  """
  displayName: String
  id: String!
  """
  The name of the drive group
  """
  name: String!
  updatedAt: String
  updatedBy: String
}

type DriveGroupList {
  data: [DriveGroup]!
  """
  Response metadata
  """
  meta: Meta
}

input DriveGroupsFilterInput {
  """
  ID of the drive group to filter on
  """
  parentGroupId: String
}

type DriveList {
  data: [Drive]!
  """
  Response metadata
  """
  meta: Meta
}

input DrivesFilterInput {
  """
  ID of the drive group to filter on
  """
  groupId: String
}

type FileList {
  data: [UnifiedFile]!
  """
  Response metadata
  """
  meta: Meta
}

type UnifiedFile {
  createdAt: String
  createdBy: String
  """
  Optional description of the file
  """
  description: String
  """
  Whether the current user can download this file
  """
  downloadable: Boolean
  """
  The third-party API ID of original entity
  """
  downstreamId: String
  id: String!
  """
  The MIME type of the file.
  """
  mimeType: String
  """
  The name of the file
  """
  name: String!
  owner: Owner
  """
  The parent folders of the file, starting from the root
  """
  parentFolders: [LinkedFolder]
  """
  Whether the list of parent folder is complete. Some connectors only return the direct parent of a file
  """
  parentFoldersComplete: Boolean
  """
  The full path of the file or folder (includes the file name)
  """
  path: String
  """
  The size of the file in bytes
  """
  size: Int
  """
  The type of resource. Could be file, folder or url
  """
  type: FileType!
  updatedAt: String
  updatedBy: String
}

type Owner {
  """
  Email of the owner
  """
  email: String
  """
  ID of the owner
  """
  id: String
  """
  Name of the owner
  """
  name: String
}

type LinkedFolder {
  id: String!
  """
  The name of the folder
  """
  name: String
}

enum FileType {
  file
  folder
  url
}

input FilesFilterInput {
  """
  ID of the drive to filter on
  """
  driveId: String
  """
  ID of the folder to filter on. The root folder has an alias "root"
  """
  folderId: String
  """
  Only return files and folders that are shared
  """
  shared: Boolean
}

input FilesSortInput {
  """
  The field on which to sort the Files
  """
  by: FilesSortBy
  """
  The direction in which to sort the results
  """
  direction: SortDirection
}

enum FilesSortBy {
  updated_at
  name
}

type Folder {
  createdAt: String
  createdBy: String
  """
  Optional description of the folder
  """
  description: String
  id: String
  """
  The name of the folder
  """
  name: String!
  owner: Owner
  """
  The parent folders of the file, starting from the root
  """
  parentFolders: [LinkedFolder]!
  """
  Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
  """
  parentFoldersComplete: Boolean
  """
  The full path of the folder (includes the folder name)
  """
  path: String
  """
  The size of the folder in bytes
  """
  size: Int
  updatedAt: String
  updatedBy: String
}

type SharedLink {
  createdAt: String
  """
  The URL that can be used to download the file.
  """
  downloadUrl: String
  expiresAt: String
  """
  Indicated if the shared link is password protected.
  """
  passwordProtected: Boolean
  """
  The scope of the shared link.
  """
  scope: Scope
  target: SharedLinkTarget
  updatedAt: String
  """
  The URL that can be used to view the file.
  """
  url: String
}

enum Scope {
  public
  company
}

type SharedLinkTarget {
  id: String!
  """
  The name of the file
  """
  name: String
  """
  The type of resource. Could be file, folder or url
  """
  type: FileType
}

type SharedLinkList {
  data: [SharedLink]!
  """
  Response metadata
  """
  meta: Meta
}

type UploadSession {
  expiresAt: String
  id: String
  """
  Indicates if parts of the file can uploaded in parallel.
  """
  parallelUploadSupported: Boolean
  """
  Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
  """
  partSize: Float
  """
  Indicates if the upload session was completed successfully.
  """
  success: Boolean
  """
  The range of bytes that was successfully uploaded.
  """
  uploadedByteRange: String
}

type MutationFileStorage {
  """
  Create DriveGroup
  """
  driveGroupsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DriveGroupInput!
  ): UnifiedId
  """
  Delete DriveGroup
  """
  driveGroupsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update DriveGroup
  """
  driveGroupsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DriveGroupInput!
  ): UnifiedId
  """
  Create Drive
  """
  drivesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DriveInput!
  ): UnifiedId
  """
  Delete Drive
  """
  drivesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Drive
  """
  drivesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DriveInput!
  ): UnifiedId
  """
  Delete File
  """
  filesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Search Files
  """
  filesSearch(requestBody: FilesSearchInput!): FileList
  """
  Create Folder
  """
  foldersAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CreateFolderRequestInput!
  ): UnifiedId
  """
  Delete Folder
  """
  foldersDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Rename or move Folder
  """
  foldersUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: UpdateFolderRequestInput!
  ): UnifiedId
  """
  Create Shared Link
  """
  sharedLinksAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: SharedLinkInput!
  ): UnifiedId
  """
  Delete Shared Link
  """
  sharedLinksDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Shared Link
  """
  sharedLinksUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: SharedLinkInput!
  ): UnifiedId
  """
  Start Upload Session
  """
  uploadSessionsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: CreateUploadSessionRequestInput!
  ): UnifiedId
  """
  Abort Upload Session
  """
  uploadSessionsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Finish Upload Session
  """
  uploadSessionsFinish(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: JSON
  ): UnifiedFile
}

input DriveGroupInput {
  description: String
  """
  The display name of the drive group
  """
  displayName: String
  """
  The name of the drive group
  """
  name: String!
}

input DriveInput {
  description: String
  """
  The name of the drive
  """
  name: String!
}

input FilesSearchInput {
  """
  ID of the drive to filter on
  """
  driveId: String
  """
  The query to search for. May match across multiple fields.
  """
  query: String!
}

input CreateFolderRequestInput {
  """
  Optional description of the folder.
  """
  description: String
  """
  ID of the drive to create the folder in.
  """
  driveId: String
  """
  The name of the folder.
  """
  name: String!
  """
  The parent folder to create the new file within.
  """
  parentFolderId: String!
}

input UpdateFolderRequestInput {
  """
  Optional description of the folder.
  """
  description: String
  """
  The name of the folder.
  """
  name: String
  """
  The parent folder to create the new file within.
  """
  parentFolderId: String
}

input SharedLinkInput {
  """
  The URL that can be used to download the file.
  """
  downloadUrl: String
  """
  Optional password for the shared link.
  """
  password: String
  """
  The scope of the shared link.
  """
  scope: Scope
  """
  The ID of the file or folder to link.
  """
  targetId: String!
}

input CreateUploadSessionRequestInput {
  """
  ID of the drive to upload to.
  """
  driveId: String
  """
  The name of the file.
  """
  name: String!
  """
  The parent folder to create the new file within.
  """
  parentFolderId: String!
  """
  The size of the file in bytes
  """
  size: Int!
}

type Hris {
  """
  Get Department
  """
  department(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Department
  """
  List Departments
  """
  departments(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): DepartmentList
  """
  Get Employee
  """
  employee(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Employee
  """
  Get payroll for employee
  """
  employeePayroll(
    """
    ID of the employee you are acting upon.
    """
    employeeId: String!
    """
    ID of the payroll you are acting upon.
    """
    payrollId: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): EmployeePayroll
  """
  List payrolls for employee
  """
  employeePayrolls(
    """
    ID of the employee you are acting upon.
    """
    employeeId: String!
    """
    Apply filters
    """
    filter: PayrollsFilterInput
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): EmployeePayrolls
  """
  List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
  """
  employeeSchedules(
    """
    ID of the employee you are acting upon.
    """
    employeeId: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): EmployeeSchedules
  """
  List Employees
  """
  employees(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: EmployeesFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): EmployeeList
  """
  List Companies
  """
  hrisCompanies(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisCompanyList
  """
  Get Company
  """
  hrisCompany(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisCompany
  """
  A Job for employee.
  """
  hrisJob(
    """
    ID of the employee you are acting upon.
    """
    employeeId: String!
    """
    ID of the job you are acting upon.
    """
    jobId: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisJob
  """
  List Jobs for employee.
  """
  jobs(
    """
    ID of the employee you are acting upon.
    """
    employeeId: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): HrisJobs
  """
  Get Payroll
  """
  payroll(
    """
    ID of the payroll you are acting upon.
    """
    payrollId: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Payroll
  """
  List Payroll
  """
  payrolls(
    """
    Apply filters
    """
    filter: PayrollsFilterInput
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): [Payroll]
  """
  Get Time Off Request
  """
  timeOffRequest(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TimeOffRequest
  """
  List Time Off Requests
  """
  timeOffRequests(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Apply filters
    """
    filter: TimeOffRequestsFilterInput
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): TimeOffRequestList
}

type DepartmentList {
  data: [Department]!
  """
  Response metadata
  """
  meta: Meta
}

type Employee {
  addresses: [Address]
  birthday: String
  companyId: String
  companyName: String
  compensations: [CompensationsListItem]
  """
  country code according to ISO 3166-1 alpha-2.
  """
  countryOfBirth: String
  createdAt: String
  createdBy: String
  customFields: [CustomField]
  deceasedOn: String
  deleted: Boolean
  """
  The department the user is currently in.
  """
  department: String
  """
  Unique identifier of the department ID this employee belongs to.
  """
  departmentId: String
  description: String
  """
  Indicate the employee's dietary preference.
  """
  dietaryPreference: String
  directReports: [String]
  displayName: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [Email]
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  """
  A Start Date is the date that the employee ended working at the company
  """
  employmentEndDate: String
  employmentRole: EmploymentRole
  """
  A Start Date is the date that the employee started working at the company
  """
  employmentStartDate: String
  employmentStatus: EmploymentStatus
  firstName: String
  """
  Indicate the employee's food allergies.
  """
  foodAllergies: [String]
  gender: Gender
  id: String!
  initials: String
  jobs: [JobsListItem]
  languages: [String]
  lastName: String
  manager: Manager
  maritalStatus: String
  middleName: String
  nationalities: [String]
  partner: Partner
  phoneNumbers: [PhoneNumber]
  photoUrl: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  preferredLanguage: String
  preferredName: String
  pronouns: String
  recordUrl: String
  rowVersion: String
  salutation: String
  socialLinks: [SocialLinksListItem]
  socialSecurityNumber: String
  """
  When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
  """
  source: String
  """
  Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
  """
  sourceId: String
  tags: [String]
  taxCode: String
  taxId: String
  """
  The team the user is currently in.
  """
  team: Team
  timezone: String
  title: String
  updatedAt: String
  updatedBy: String
  """
  Indicates whether the employee works remote
  """
  worksRemote: Boolean
}

type CompensationsListItem {
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The effective date for this compensation.
  """
  effectiveDate: String
  """
  The FLSA status for this compensation.
  """
  flsaStatus: FlsaStatus
  id: String
  """
  The ID of the job to which the compensation belongs.
  """
  jobId: String
  paymentUnit: PaymentUnit
  """
  The amount paid per payment unit.
  """
  rate: Float
}

enum FlsaStatus {
  exempt
  salariednonexempt
  nonexempt
  owner
}

enum PaymentUnit {
  hour
  week
  month
  year
  paycheck
}

type EmploymentRole {
  subType: SubType
  type: Type
}

enum SubType {
  full_time
  part_time
  hourly
}

enum EmploymentStatus {
  active
  inactive
  terminated
  other
}

type JobsListItem {
  compensationRate: Float
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  employeeId: String
  endDate: String
  hiredAt: String
  id: String
  """
  Indicates whether this the employee's primary job
  """
  isPrimary: Boolean
  location: Address
  paymentUnit: PaymentUnit
  role: String
  startDate: String
  title: String
}

type Manager {
  email: String
  firstName: String
  id: String
  lastName: String
  name: String
}

type Partner {
  birthday: String
  deceasedOn: String
  firstName: String
  gender: Gender
  id: String
  initials: String
  lastName: String
  middleName: String
}

"""
The team the user is currently in.
"""
type Team {
  id: String
  name: String
}

type EmployeePayroll {
  employee: Employee
  payroll: Payroll
}

type Payroll {
  """
  The date on which employees will be paid for the payroll.
  """
  checkDate: String!
  companyId: String
  """
  An array of compensations for the payroll.
  """
  compensations: [Compensation]
  """
  The end date, inclusive, of the pay period.
  """
  endDate: String!
  id: String!
  """
  Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
  """
  processed: Boolean!
  """
  The date the payroll was processed.
  """
  processedDate: String
  """
  The start date, inclusive, of the pay period.
  """
  startDate: String!
  totals: PayrollTotals
}

type Compensation {
  """
  An array of employee benefits for the pay period.
  """
  benefits: [Benefit]
  """
  An array of employee deductions for the pay period.
  """
  deductions: [Deduction]
  employeeId: String!
  """
  The employee's gross pay. Only available when payroll has been processed
  """
  grossPay: Float
  """
  The employee's net pay. Only available when payroll has been processed
  """
  netPay: Float
  """
  An array of employer and employee taxes for the pay period.
  """
  taxes: [Tax]
}

type Benefit {
  """
  The amount deducted for benefit.
  """
  employeeDeduction: Float
  """
  The amount of employer contribution.
  """
  employerContribution: Float
  """
  The name of the benefit.
  """
  name: String
}

type Deduction {
  """
  The amount deducted.
  """
  amount: Float
  """
  The name of the deduction.
  """
  name: String
}

type Tax {
  """
  The amount of the tax.
  """
  amount: Float
  """
  Paid by employer.
  """
  employer: Boolean
  """
  The name of the tax.
  """
  name: String
}

type PayrollTotals {
  """
  The total check amount for the payroll.
  """
  checkAmount: Float
  """
  The total company debit for the payroll.
  """
  companyDebit: Float
  """
  The total amount of employee deducted benefits for the payroll.
  """
  employeeBenefitDeductions: Float
  """
  The total amount of employee paid taxes for the payroll.
  """
  employeeTaxes: Float
  """
  The total amount of company contributed benefits for the payroll.
  """
  employerBenefitContributions: Float
  """
  The total amount of employer paid taxes for the payroll.
  """
  employerTaxes: Float
  """
  The gross pay amount for the payroll.
  """
  grossPay: Float
  """
  The net pay amount for the payroll.
  """
  netPay: Float
  """
  The total tax debit for the payroll.
  """
  taxDebit: Float
}

type EmployeePayrolls {
  employee: Employee
  payrolls: [Payroll]
}

input PayrollsFilterInput {
  """
  Return payrolls whose pay period is before the end date
  """
  endDate: String
  """
  Return payrolls whose pay period is after the start date
  """
  startDate: String
}

type EmployeeSchedules {
  employee: Employee
  schedules: [Schedule]
}

type Schedule {
  """
  The end date, inclusive, of the schedule period.
  """
  endDate: String!
  id: String!
  """
  The start date, inclusive, of the schedule period.
  """
  startDate: String!
  workPattern: WorkPattern!
}

type WorkPattern {
  evenWeeks: EvenWeeks
  oddWeeks: OddWeeks
}

type EvenWeeks {
  hoursFriday: Float
  hoursMonday: Float
  hoursSaturday: Float
  hoursSunday: Float
  hoursThursday: Float
  hoursTuesday: Float
  hoursWednesday: Float
}

type OddWeeks {
  hoursFriday: Float
  hoursMonday: Float
  hoursSaturday: Float
  hoursSunday: Float
  hoursThursday: Float
  hoursTuesday: Float
  hoursWednesday: Float
}

type EmployeeList {
  data: [Employee]!
  """
  Response metadata
  """
  meta: Meta
}

input EmployeesFilterInput {
  """
  Company ID to filter on
  """
  companyId: String
  """
  Email to filter on
  """
  email: String
  """
  Employee number to filter on
  """
  employeeNumber: String
  """
  Employment status to filter on
  """
  employmentStatus: EmploymentStatusFilter
  """
  First Name to filter on
  """
  firstName: String
  """
  Last Name to filter on
  """
  lastName: String
  """
  Manager id to filter on
  """
  managerId: String
  """
  Job title to filter on
  """
  title: String
}

enum EmploymentStatusFilter {
  active
  inactive
  terminated
  other
}

type HrisCompanyList {
  data: [HrisCompany]!
  """
  Response metadata
  """
  meta: Meta
}

type HrisCompany {
  addresses: [Address]
  """
  An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
  """
  companyNumber: String
  createdAt: String
  createdBy: String
  debtorId: String
  deleted: Boolean
  displayName: String
  emails: [Email]
  id: String
  legalName: String!
  phoneNumbers: [PhoneNumber]
  status: Status
  subdomain: String
  updatedAt: String
  updatedBy: String
  websites: [Website]
}

type HrisJob {
  """
  Department name
  """
  department: String
  """
  Id of the employee
  """
  employeeId: String
  employmentStatus: EmploymentStatus
  endDate: String
  id: String
  location: Location
  startDate: String
  title: String
}

type Location {
  name: String
}

type HrisJobs {
  employee: Employee
  jobs: [HrisJob]
}

type TimeOffRequest {
  """
  The amount of time off requested.
  """
  amount: Float
  """
  The date the request was approved
  """
  approvalDate: String
  createdAt: String
  createdBy: String
  """
  Description of the time off request.
  """
  description: String
  """
  ID of the employee
  """
  employeeId: String
  """
  The end date of the time off request.
  """
  endDate: String
  id: String
  notes: Notes
  """
  ID of the policy
  """
  policyId: String
  """
  The date the request was made.
  """
  requestDate: String
  """
  The type of request
  """
  requestType: TimeOffRequestType
  """
  The start date of the time off request.
  """
  startDate: String
  """
  The status of the time off request.
  """
  status: TimeOffRequestStatus
  """
  The unit of time off requested. Possible values include: \`hours\`, \`days\`, or \`other\`.
  """
  units: TimeOffRequestUnits
  updatedAt: String
  updatedBy: String
}

type Notes {
  employee: String
  manager: String
}

enum TimeOffRequestType {
  vacaction
  sick
  personal
  jury_duty
  volunteer
  bereavement
  other
}

enum TimeOffRequestStatus {
  requested
  approved
  declined
  canceled
  deleted
  other
}

enum TimeOffRequestUnits {
  days
  hours
  other
}

type TimeOffRequestList {
  data: [TimeOffRequest]!
  """
  Response metadata
  """
  meta: Meta
}

input TimeOffRequestsFilterInput {
  """
  End date
  """
  endDate: String
  """
  Start date
  """
  startDate: String
}

type MutationHris {
  """
  Create Company
  """
  companiesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: HrisCompanyInput!
  ): UnifiedId
  """
  Delete Company
  """
  companiesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Company
  """
  companiesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: HrisCompanyInput!
  ): UnifiedId
  """
  Create Department
  """
  departmentsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DepartmentInput!
  ): UnifiedId
  """
  Delete Department
  """
  departmentsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Department
  """
  departmentsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: DepartmentInput!
  ): UnifiedId
  """
  Create Employee
  """
  employeesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: EmployeeInput!
  ): UnifiedId
  """
  Delete Employee
  """
  employeesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Employee
  """
  employeesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: EmployeeInput!
  ): UnifiedId
  """
  Create Time Off Request
  """
  timeOffRequestsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TimeOffRequestInput!
  ): UnifiedId
  """
  Delete Time Off Request
  """
  timeOffRequestsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Time Off Request
  """
  timeOffRequestsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: TimeOffRequestInput!
  ): UnifiedId
}

input HrisCompanyInput {
  addresses: [AddressInput]
  """
  An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
  """
  companyNumber: String
  debtorId: String
  displayName: String
  emails: [EmailInput]
  legalName: String!
  phoneNumbers: [PhoneNumberInput]
  status: Status
  subdomain: String
  websites: [WebsiteInput]
}

input DepartmentInput {
  code: String
  description: String
  """
  Department name
  """
  name: String
}

input EmployeeInput {
  addresses: [AddressInput]
  birthday: String
  companyId: String
  companyName: String
  compensations: [CompensationsListItemInput]
  """
  country code according to ISO 3166-1 alpha-2.
  """
  countryOfBirth: String
  customFields: [CustomFieldInput]
  deceasedOn: String
  deleted: Boolean
  """
  The department the user is currently in.
  """
  department: String
  """
  Unique identifier of the department ID this employee belongs to.
  """
  departmentId: String
  description: String
  """
  Indicate the employee's dietary preference.
  """
  dietaryPreference: String
  directReports: [String]
  displayName: String
  """
  The division the user is currently in.
  """
  division: String
  emails: [EmailInput]
  """
  An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
  """
  employeeNumber: String
  """
  A Start Date is the date that the employee ended working at the company
  """
  employmentEndDate: String
  employmentRole: EmploymentRoleInput
  """
  A Start Date is the date that the employee started working at the company
  """
  employmentStartDate: String
  employmentStatus: EmploymentStatus
  firstName: String
  """
  Indicate the employee's food allergies.
  """
  foodAllergies: [String]
  gender: Gender
  initials: String
  jobs: [JobsListItemInput]
  languages: [String]
  lastName: String
  manager: ManagerInput
  maritalStatus: String
  middleName: String
  nationalities: [String]
  partner: PartnerInput
  phoneNumbers: [PhoneNumberInput]
  photoUrl: String
  """
  language code according to ISO 639-1. For the United States - EN
  """
  preferredLanguage: String
  preferredName: String
  pronouns: String
  recordUrl: String
  rowVersion: String
  salutation: String
  socialLinks: [SocialLinksListItemInput]
  socialSecurityNumber: String
  """
  When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
  """
  source: String
  """
  Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
  """
  sourceId: String
  tags: [String]
  taxCode: String
  taxId: String
  """
  The team the user is currently in.
  """
  team: TeamInput
  timezone: String
  title: String
  """
  Indicates whether the employee works remote
  """
  worksRemote: Boolean
}

input CompensationsListItemInput {
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """
  The effective date for this compensation.
  """
  effectiveDate: String
  """
  The FLSA status for this compensation.
  """
  flsaStatus: FlsaStatus
  paymentUnit: PaymentUnit
  """
  The amount paid per payment unit.
  """
  rate: Float
}

input EmploymentRoleInput {
  subType: SubType
  type: Type
}

input JobsListItemInput {
  compensationRate: Float
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  endDate: String
  hiredAt: String
  """
  Indicates whether this the employee's primary job
  """
  isPrimary: Boolean
  location: AddressInput
  paymentUnit: PaymentUnit
  role: String
  startDate: String
  title: String
}

input ManagerInput {
  email: String
  firstName: String
  lastName: String
  name: String
}

input PartnerInput {
  birthday: String
  deceasedOn: String
  firstName: String
  gender: Gender
  initials: String
  lastName: String
  middleName: String
}

"""
The team the user is currently in.
"""
input TeamInput {
  id: String
  name: String
}

input TimeOffRequestInput {
  """
  The amount of time off requested.
  """
  amount: Float
  """
  The date the request was approved
  """
  approvalDate: String
  """
  Description of the time off request.
  """
  description: String
  """
  ID of the employee
  """
  employeeId: String
  """
  The end date of the time off request.
  """
  endDate: String
  notes: NotesInput
  """
  ID of the policy
  """
  policyId: String
  """
  The date the request was made.
  """
  requestDate: String
  """
  The type of request
  """
  requestType: TimeOffRequestType
  """
  The start date of the time off request.
  """
  startDate: String
  """
  The status of the time off request.
  """
  status: TimeOffRequestStatus
  """
  The unit of time off requested. Possible values include: \`hours\`, \`days\`, or \`other\`.
  """
  units: TimeOffRequestUnits
}

input NotesInput {
  employee: String
  manager: String
}

type MutationLead {
  """
  Create lead
  """
  leadsAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
  """
  Delete lead
  """
  leadsDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update lead
  """
  leadsUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: LeadInput!
  ): UnifiedId
}

type Sms {
  """
  Get Message
  """
  message(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): Message
  """
  List Messages
  """
  messages(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): MessageList
}

type Message {
  """
  The message text.
  """
  body: String!
  createdAt: String
  createdBy: String
  """
  The direction of the message.
  """
  direction: Direction
  """
  The error returned if your message status is failed or undelivered.
  """
  error: Error
  """
  The phone number that initiated the message.
  """
  from: String!
  id: String
  """
  The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
  """
  messagingServiceId: String
  """
  The number of media files associated with the message.
  """
  numberOfMediaFiles: Int
  """
  The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
  """
  numberOfUnits: Int
  """
  Price of the message.
  """
  price: Price
  """
  A client reference.
  """
  reference: String
  """
  The scheduled date and time of the message.
  """
  scheduledAt: String
  """
  The date and time that the message was sent
  """
  sentAt: String
  """
  Status of the delivery of the message.
  """
  status: Status
  subject: String
  """
  The phone number that received the message.
  """
  to: String!
  """
  Set to sms for SMS messages and mms for MMS messages.
  """
  type: Type
  updatedAt: String
  updatedBy: String
  """
  Define a webhook to receive delivery notifications.
  """
  webhookUrl: String
}

enum Direction {
  inbound
  outboundapi
  outboundcall
  outboundreply
  unknown
}

"""
The error returned if your message status is failed or undelivered.
"""
type Error {
  """
  The error_code provides more information about the failure. If the message was successful, this value is null
  """
  code: String
  message: String
}

"""
Price of the message.
"""
type Price {
  """
  Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
  """
  currency: Currency
  """

  """
  perUnit: String
  """

  """
  totalAmount: String
}

type MessageList {
  data: [Message]!
  """
  Response metadata
  """
  meta: Meta
}

type MutationSms {
  """
  Create Message
  """
  messagesAdd(
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: MessageInput!
  ): UnifiedId
  """
  Delete Message
  """
  messagesDelete(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
  ): UnifiedId
  """
  Update Message
  """
  messagesUpdate(
    """
    ID of the record you are acting upon.
    """
    id: String!
    """
    Include raw response. Mostly used for debugging purposes
    """
    raw: Boolean
    requestBody: MessageInput!
  ): UnifiedId
}

input MessageInput {
  """
  The message text.
  """
  body: String!
  """
  The phone number that initiated the message.
  """
  from: String!
  """
  The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
  """
  messagingServiceId: String
  """
  A client reference.
  """
  reference: String
  """
  The scheduled date and time of the message.
  """
  scheduledAt: String
  subject: String
  """
  The phone number that received the message.
  """
  to: String!
  """
  Set to sms for SMS messages and mms for MMS messages.
  """
  type: Type
  """
  Define a webhook to receive delivery notifications.
  """
  webhookUrl: String
}

type Vault {
  """
  Get a connection
  """
  connection(
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  This endpoint returns custom settings and their defaults required by connection for a given resource.
  """
  connectionSettings(
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  This endpoint includes all the configured integrations and contains the required assets
  to build an integrations page where your users can install integrations.
  OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
  """
  connections(
    """
    Scope results to Unified API
    """
    api: String
    """
    Scopes results to connections that have been configured or not
    """
    configured: Boolean
  ): [Connection]
  """
  Consumer detail including their aggregated counts with the connections they have authorized.
  """
  consumer(
    """
    ID of the consumer to return
    """
    consumerId: String!
  ): Consumer
  """
  Get consumer request counts within a given datetime range.
  """
  consumerRequestCounts(
    """
    ID of the consumer to return
    """
    consumerId: String!
    """
    Scopes results to requests that happened before datetime
    """
    endDatetime: String!
    """
    Scopes results to requests that happened after datetime
    """
    startDatetime: String!
  ): ConsumerRequestCountsInDateRangeResponse
  """
  This endpoint includes all application consumers, along with an aggregated count of requests made.
  """
  consumers(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Number of records to return
    """
    limit: Int
  ): GetConsumersResponse
  """
  This endpoint includes all consumer request logs.
  """
  logs(
    """
    Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
    """
    cursor: String
    """
    Filter results
    """
    filter: LogsFilterInput
    """
    Number of records to return
    """
    limit: Int
  ): LogList
}

type Connection {
  """
  Type of authorization used by the connector
  """
  authType: AuthType
  """
  The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add \`redirect_uri\` as a query parameter. Your users will be redirected to this \`redirect_uri\` after they granted access to your app in the connector's UI.
  """
  authorizeUrl: String
  configurableResources: [String]
  configuration: [ConfigurationListItem]
  createdAt: Float
  """
  Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
  """
  enabled: Boolean
  formFields: [FormField]
  """
  Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
  """
  hasGuide: Boolean
  icon: String
  id: String
  logo: String
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  name: String
  """
  OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
  """
  oauthGrantType: OAuthGrantType
  resourceSchemaSupport: [String]
  resourceSettingsSupport: [String]
  """
  The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add \`redirect_uri\` as a query parameter. Your users will be redirected to this \`redirect_uri\` after they granted access to your app in the connector's UI.
  """
  revokeUrl: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  """
  List of settings that are required to be configured on integration before authorization can occur
  """
  settingsRequiredForAuthorization: [String]
  """
  [Connection state flow](#section/Connection-state)
  """
  state: ConnectionState
  status: Status
  tagLine: String
  unifiedApi: String
  updatedAt: Float
  website: String
}

enum AuthType {
  oauth2
  apiKey
  basic
  custom
  none
}

type ConfigurationListItem {
  defaults: [DefaultsListItem]
  resource: String
}

type DefaultsListItem {
  id: String
  options: [FormFieldOption]
  target: Target
  value: JSON
}

type FormFieldOption {
  id: String
  label: String
  options: [SimpleFormFieldOption]
  value: JSON
}

type SimpleFormFieldOption {
  label: String
  value: JSON
}

enum Target {
  custom_fields
  resource
}

type FormField {
  """
  Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
  """
  allowCustomValues: Boolean
  customField: Boolean
  description: String
  disabled: Boolean
  id: String
  label: String
  options: [FormFieldOption]
  placeholder: String
  required: Boolean
  sensitive: Boolean
  type: Type
}

enum OAuthGrantType {
  authorization_code
  client_credentials
}

enum ConnectionState {
  available
  callable
  added
  authorized
}

type Consumer {
  aggregatedRequestCount: Float
  applicationId: String
  connections: [ConsumerConnection]
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type ConsumerConnection {
  """
  Type of authorization used by the connector
  """
  authType: AuthType
  consumerId: String
  createdAt: String
  enabled: Boolean
  icon: String
  id: String
  logo: String
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  name: String
  serviceId: String
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
  state: State
  tagLine: String
  unifiedApi: String
  updatedAt: String
  website: String
}

enum State {
  available
  callable
  added
  configured
  authorized
}

type ConsumerMetadata {
  accountName: String
  email: String
  image: String
  userName: String
}

type RequestCountAllocation {
  proxy: Float
  unify: Float
  vault: Float
}

type ConsumerRequestCountsInDateRangeResponse {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  endDatetime: String
  requestCounts: RequestCountAllocation
  startDatetime: String
}

type GetConsumersResponse {
  data: [DataListItem]!
  """
  Response metadata
  """
  meta: Meta
}

type DataListItem {
  aggregatedRequestCount: Float
  applicationId: String
  consumerId: String
  created: String
  metadata: ConsumerMetadata
  modified: String
  requestCountUpdated: String
  requestCounts: RequestCountAllocation
  services: [String]
}

type LogList {
  data: [Log]!
  """
  Response metadata
  """
  meta: Meta
}

type Log {
  """
  Indicates if the request was made via REST or Graphql endpoint.
  """
  apiStyle: String!
  """
  The Apideck base URL the request was made to.
  """
  baseUrl: String!
  """
  Indicates whether or not this is a child or parent request.
  """
  childRequest: Boolean!
  """
  The consumer Id associated with the request.
  """
  consumerId: String!
  """
  The entire execution time in milliseconds it took to call the Apideck service provider.
  """
  duration: Float!
  """
  If error occurred, this is brief explanation
  """
  errorMessage: String
  """
  The entire execution time in milliseconds it took to make the request.
  """
  execution: Int!
  """
  When request is a parent request, this indicates if there are child requests associated.
  """
  hasChildren: Boolean!
  """
  HTTP Method of request.
  """
  httpMethod: String!
  """
  UUID acting as Request Identifier.
  """
  id: String!
  """
  Latency added by making this request via Unified Api.
  """
  latency: Float!
  """
  The request as defined in OpenApi Spec.
  """
  operation: Operation!
  """
  When request is a child request, this UUID indicates it's parent request.
  """
  parentId: String!
  """
  The path component of the URI the request was made to.
  """
  path: String!
  """
  Indicates whether the request was made using Apidecks sandbox credentials or not.
  """
  sandbox: Boolean!
  """
  Apideck service provider associated with request.
  """
  service: Service!
  """
  The IP address of the source of the request.
  """
  sourceIp: String
  """
  HTTP Status code that was returned.
  """
  statusCode: Int!
  """
  Whether or not the request was successful.
  """
  success: Boolean!
  """
  ISO Date and time when the request was made.
  """
  timestamp: String!
  """
  Which Unified Api request was made to.
  """
  unifiedApi: UnifiedApi!
}

"""
The request as defined in OpenApi Spec.
"""
type Operation {
  """
  The OpenApi Operation Id associated with the request
  """
  id: String!
  """
  The OpenApi Operation name associated with the request
  """
  name: String!
}

"""
Apideck service provider associated with request.
"""
type Service {
  """
  Apideck service provider id.
  """
  id: String!
  """
  Apideck service provider name.
  """
  name: String!
}

enum UnifiedApi {
  crm
  lead
  proxy
  vault
  accounting
  hris
  ats
  pos
  filestorage
  sms
}

input LogsFilterInput {
  connectorId: String
  excludeUnifiedApis: String
  statusCode: Float
}

type MutationVault {
  """
  Update default values for a connection's resource settings
  """
  connectionSettingsUpdate(
    requestBody: ConnectionInput!
    """
    Resource Name
    """
    resource: String!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Deletes a connection
  """
  connectionsDelete(
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): JSON
  """
  Update a connection
  """
  connectionsUpdate(
    requestBody: ConnectionInput!
    """
    Service ID of the resource to return
    """
    serviceId: String!
    """
    Unified API
    """
    unifiedApi: String!
  ): Connection
  """
  Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
  url to allow temporary access to manage their integrations and settings.

  Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
  """
  sessionsCreate(requestBody: SessionInput): CreateSessionResponse
}

input ConnectionInput {
  configuration: [ConfigurationListItemInput]
  """
  Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
  """
  enabled: Boolean
  """
  Attach your own consumer specific metadata
  """
  metadata: JSON
  """
  Connection settings. Values will persist to \`form_fields\` with corresponding id
  """
  settings: JSON
}

input ConfigurationListItemInput {
  defaults: [DefaultsListItemInput]
  resource: String
}

input DefaultsListItemInput {
  id: String
  options: [FormFieldOptionInput]
  value: JSON
}

input FormFieldOptionInput {
  id: String
  label: String
  options: [SimpleFormFieldOptionInput]
  value: JSON
}

input SimpleFormFieldOptionInput {
  label: String
  value: JSON
}

type CreateSessionResponse {
  sessionToken: String!
  sessionUri: String!
}

input SessionInput {
  consumerMetadata: ConsumerMetadataInput
  """
  Custom consumer settings that are passed as part of the session.
  """
  customConsumerSettings: JSON
  redirectUri: String
  settings: SessionSettingsInput
  theme: ThemeInput
}

input ConsumerMetadataInput {
  accountName: String
  email: String
  image: String
  userName: String
}

input SessionSettingsInput {
  """
  Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to \`false\`.
  """
  autoRedirect: Boolean
  hideResourceSettings: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.
  """
  isolationMode: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.
  """
  sandboxMode: Boolean
  """
  The duration of time the session is valid for (maximum 1 week).
  """
  sessionLength: String
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to \`true\`.
  """
  showLogs: Boolean
  """
  Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to \`true\`.
  """
  showSuggestions: Boolean
  """
  Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omiting this field will show all Unified APIs.
  """
  unifiedApis: [UnifiedApiId]
}

enum UnifiedApiId {
  vault
  lead
  crm
  accounting
  filestorage
  spreadsheet
  email
  script
  sms
  teammessaging
  ecommerce
  payroll
  customersupport
  timeregistration
  transactionalemail
  hcm
  form
  csp
  emailmarketing
  ats
  hris
  pos
  projectmanagement
}

input ThemeInput {
  favicon: String
  primaryColor: String
  privacyUrl: String
  sidepanelBackgroundColor: String
  sidepanelTextColor: String
  termsUrl: String
  vaultName: String
}
